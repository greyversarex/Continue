#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: –ø–µ—Ä–µ–Ω–æ—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö countryId/cityId –≤ –Ω–æ–≤—ã–µ many-to-many —Ç–∞–±–ª–∏—Ü—ã
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function migrateTourLocations() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤...');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ countryId –∏ cityId
        const tours = await prisma.tour.findMany({
            where: {
                OR: [
                    { countryId: { not: null } },
                    { cityId: { not: null } }
                ]
            },
            select: {
                id: true,
                countryId: true,
                cityId: true,
                title: true
            }
        });

        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${tours.length} —Ç—É—Ä–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);

        let countryMigrations = 0;
        let cityMigrations = 0;

        for (const tour of tours) {
            console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ä ID ${tour.id}: ${JSON.stringify(tour.title)}`);

            // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω—ã
            if (tour.countryId) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–≤—è–∑—å
                const existingCountryLink = await prisma.tourCountry.findUnique({
                    where: {
                        tourId_countryId: {
                            tourId: tour.id,
                            countryId: tour.countryId
                        }
                    }
                });

                if (!existingCountryLink) {
                    await prisma.tourCountry.create({
                        data: {
                            tourId: tour.id,
                            countryId: tour.countryId,
                            isPrimary: true // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        }
                    });
                    countryMigrations++;
                    console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å —Å–æ —Å—Ç—Ä–∞–Ω–æ–π ID ${tour.countryId} (–æ—Å–Ω–æ–≤–Ω–∞—è)`);
                } else {
                    console.log(`  ‚è© –°–≤—è–∑—å —Å–æ —Å—Ç—Ä–∞–Ω–æ–π ID ${tour.countryId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                }
            }

            // –ú–∏–≥—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞
            if (tour.cityId) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–≤—è–∑—å
                const existingCityLink = await prisma.tourCity.findUnique({
                    where: {
                        tourId_cityId: {
                            tourId: tour.id,
                            cityId: tour.cityId
                        }
                    }
                });

                if (!existingCityLink) {
                    await prisma.tourCity.create({
                        data: {
                            tourId: tour.id,
                            cityId: tour.cityId,
                            isPrimary: true // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        }
                    });
                    cityMigrations++;
                    console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å —Å –≥–æ—Ä–æ–¥–æ–º ID ${tour.cityId} (–æ—Å–Ω–æ–≤–Ω–æ–π)`);
                } else {
                    console.log(`  ‚è© –°–≤—è–∑—å —Å –≥–æ—Ä–æ–¥–æ–º ID ${tour.cityId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                }
            }
        }

        console.log(`\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—É—Ä–æ–≤: ${tours.length}`);
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏: ${countryMigrations}`);
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π —Å –≥–æ—Ä–æ–¥–∞–º–∏: ${cityMigrations}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const totalTourCountries = await prisma.tourCountry.count();
        const totalTourCities = await prisma.tourCity.count();
        
        console.log(`\nüìà –ò—Ç–æ–≥–æ –≤ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö:`);
        console.log(`  - –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π —Ç—É—Ä–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏: ${totalTourCountries}`);
        console.log(`  - –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π —Ç—É—Ä–æ–≤ —Å –≥–æ—Ä–æ–¥–∞–º–∏: ${totalTourCities}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    migrateTourLocations()
        .then(() => {
            console.log('‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
            process.exit(1);
        });
}

export default migrateTourLocations;