const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

const countriesData = [
  {
    name: 'Tajikistan',
    nameRu: '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω',
    nameEn: 'Tajikistan', 
    nameTj: '–¢–æ“∑–∏–∫–∏—Å—Ç–æ–Ω',
    code: 'TJ',
    cities: [
      {
        name: 'Dushanbe',
        nameRu: '–î—É—à–∞–Ω–±–µ',
        nameEn: 'Dushanbe',
        nameTj: '–î—É—à–∞–Ω–±–µ'
      },
      {
        name: 'Khujand',
        nameRu: '–•—É–¥–∂–∞–Ω–¥',
        nameEn: 'Khujand',
        nameTj: '–•—É–¥–∂–∞–Ω–¥'
      },
      {
        name: 'Khorog',
        nameRu: '–•–æ—Ä–æ–≥',
        nameEn: 'Khorog',
        nameTj: '–•–æ—Ä—É“ì'
      }
    ]
  },
  {
    name: 'Uzbekistan',
    nameRu: '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
    nameEn: 'Uzbekistan',
    nameTj: '”Æ–∑–±–∞–∫–∏—Å—Ç–æ–Ω',
    code: 'UZ',
    cities: [
      {
        name: 'Tashkent',
        nameRu: '–¢–∞—à–∫–µ–Ω—Ç',
        nameEn: 'Tashkent',
        nameTj: '–¢–æ—à–∫–∞–Ω–¥'
      },
      {
        name: 'Samarkand',
        nameRu: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        nameEn: 'Samarkand',
        nameTj: '–°–∞–º–∞—Ä“õ–∞–Ω–¥'
      },
      {
        name: 'Bukhara',
        nameRu: '–ë—É—Ö–∞—Ä–∞',
        nameEn: 'Bukhara',
        nameTj: '–ë—É—Ö–æ—Ä–æ'
      }
    ]
  },
  {
    name: 'Kyrgyzstan',
    nameRu: '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω',
    nameEn: 'Kyrgyzstan',
    nameTj: '“ö–∏—Ä“ì–∏–∑–∏—Å—Ç–æ–Ω',
    code: 'KG',
    cities: [
      {
        name: 'Bishkek',
        nameRu: '–ë–∏—à–∫–µ–∫',
        nameEn: 'Bishkek',
        nameTj: '–ë–∏—à–∫–µ–∫'
      }
    ]
  },
  {
    name: 'Kazakhstan',
    nameRu: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
    nameEn: 'Kazakhstan',
    nameTj: '“ö–∞–∑–æ“õ–∏—Å—Ç–æ–Ω',
    code: 'KZ',
    cities: [
      {
        name: 'Astana',
        nameRu: '–ê—Å—Ç–∞–Ω–∞',
        nameEn: 'Astana',
        nameTj: '–ê—Å—Ç–∞–Ω–∞'
      },
      {
        name: 'Almaty',
        nameRu: '–ê–ª–º–∞—Ç—ã',
        nameEn: 'Almaty',
        nameTj: '–ê–ª–º–∞—Ç—ã'
      }
    ]
  },
  {
    name: 'Turkmenistan',
    nameRu: '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω',
    nameEn: 'Turkmenistan',
    nameTj: '–¢—É—Ä–∫–º–∞–Ω–∏—Å—Ç–æ–Ω',
    code: 'TM',
    cities: [
      {
        name: 'Ashgabat',
        nameRu: '–ê—à—Ö–∞–±–∞–¥',
        nameEn: 'Ashgabat',
        nameTj: '–ê—à—Ö–æ–±–æ–¥'
      }
    ]
  }
];

async function seedCountriesAndCities() {
  console.log('üåç –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ê–∑–∏–∏...');
  
  try {
    for (const countryData of countriesData) {
      console.log(`üìç –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: ${countryData.nameRu}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∞
      const existingCountry = await prisma.country.findUnique({
        where: { code: countryData.code }
      });
      
      let country;
      if (existingCountry) {
        console.log(`   ‚úÖ –°—Ç—Ä–∞–Ω–∞ ${countryData.nameRu} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        country = existingCountry;
      } else {
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω—É
        country = await prisma.country.create({
          data: {
            name: countryData.name,
            nameRu: countryData.nameRu,
            nameEn: countryData.nameEn,
            nameTj: countryData.nameTj,
            code: countryData.code,
            isActive: true
          }
        });
        console.log(`   ‚úÖ –°—Ç—Ä–∞–Ω–∞ ${countryData.nameRu} —Å–æ–∑–¥–∞–Ω–∞`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
      for (const cityData of countryData.cities) {
        const existingCity = await prisma.city.findFirst({
          where: {
            nameRu: cityData.nameRu,
            countryId: country.id
          }
        });
        
        if (existingCity) {
          console.log(`   üèôÔ∏è –ì–æ—Ä–æ–¥ ${cityData.nameRu} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        } else {
          const city = await prisma.city.create({
            data: {
              name: cityData.name,
              nameRu: cityData.nameRu,
              nameEn: cityData.nameEn,
              nameTj: cityData.nameTj,
              countryId: country.id,
              isActive: true
            }
          });
          console.log(`   üèôÔ∏è –ì–æ—Ä–æ–¥ ${cityData.nameRu} —Å–æ–∑–¥–∞–Ω`);
        }
      }
    }
    
    console.log('üéâ –í—Å–µ —Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ê–∑–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const countriesCount = await prisma.country.count();
    const citiesCount = await prisma.city.count();
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –°—Ç—Ä–∞–Ω: ${countriesCount}`);
    console.log(`   –ì–æ—Ä–æ–¥–æ–≤: ${citiesCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedCountriesAndCities()
    .then(() => {
      console.log('‚úÖ Seed –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ seed:', error);
      process.exit(1);
    });
}

module.exports = { seedCountriesAndCities };