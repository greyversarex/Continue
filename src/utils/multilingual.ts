/**
 * üåê –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–û–°–¢–ò
 * 
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON –ø–æ–ª—è —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
 * —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º: EN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å RU
 */

export type SupportedLanguage = 'en' | 'ru';
export type MultilingualField = { en: string; ru: string } | string | null;

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON —Å—Ç—Ä–æ–∫ —Å –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
 */
export function safeJsonParse(jsonString: any, defaultValue: any = { ru: '', en: '' }): any {
  if (!jsonString) return defaultValue;
  if (typeof jsonString === 'object') return jsonString;
  
  try {
    return JSON.parse(jsonString);
  } catch (error) {
    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –∫–∞–∫ –µ—Å—Ç—å, –∞ –Ω–µ default value
    if (typeof jsonString === 'string') {
      return jsonString;
    }
    console.warn('JSON parsing error:', error);
    return defaultValue;
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ —Å fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π
 * 
 * @param field - –ü–æ–ª–µ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ (JSON –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
 * @param language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ ('en' | 'ru')
 * @returns –¢–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ –∏–ª–∏ fallback
 */
export function getLocalizedText(field: MultilingualField, language: SupportedLanguage = 'ru'): string {
  if (!field) return '';
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (typeof field === 'string') {
    return field;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
  if (typeof field === 'object' && field !== null) {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    const text = field[language];
    if (text && text.trim()) {
      return text;
    }
    
    // Fallback: –µ—Å–ª–∏ EN –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º RU
    if (language === 'en' && field.ru && field.ru.trim()) {
      return field.ru;
    }
    
    // Fallback: –µ—Å–ª–∏ RU –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º EN
    if (language === 'ru' && field.en && field.en.trim()) {
      return field.en;
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—é–±–æ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    return field.ru || field.en || '';
  }
  
  return '';
}

/**
 * –ü–∞—Ä—Å–∏—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–µ –ø–æ–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
 * 
 * @param jsonField - JSON —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
 * @param language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 * @returns –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function parseMultilingualField(jsonField: any, language: SupportedLanguage = 'ru'): string {
  const parsed = safeJsonParse(jsonField, { ru: '', en: '' });
  return getLocalizedText(parsed, language);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
 * 
 * @param obj - –û–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param fieldsToTranslate - –ú–∞—Å—Å–∏–≤ –ø–æ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
 * @param language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 * @returns –û–±—ä–µ–∫—Ç —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
 */
export function localizeObject(
  obj: any, 
  fieldsToTranslate: string[], 
  language: SupportedLanguage = 'ru'
): any {
  if (!obj) return obj;
  
  const localized = { ...obj };
  
  fieldsToTranslate.forEach(field => {
    if (obj[field]) {
      localized[field] = parseMultilingualField(obj[field], language);
    }
  });
  
  return localized;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
 * 
 * @param array - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
 * @param fieldsToTranslate - –ü–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
 * @param language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 * @returns –ú–∞—Å—Å–∏–≤ —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
 */
export function localizeArray(
  array: any[], 
  fieldsToTranslate: string[], 
  language: SupportedLanguage = 'ru'
): any[] {
  if (!Array.isArray(array)) return array;
  
  return array.map(item => localizeObject(item, fieldsToTranslate, language));
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —è–∑—ã–∫ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
 * 
 * @param req - Express Request –æ–±—ä–µ–∫—Ç
 * @returns –í–∞–ª–∏–¥–Ω—ã–π —è–∑—ã–∫ —Å fallback –Ω–∞ 'ru'
 */
export function getLanguageFromRequest(req: any): SupportedLanguage {
  const lang = req.query.lang as string;
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —è–∑—ã–∫–∞
  if (lang === 'en' || lang === 'ru') {
    return lang;
  }
  
  // Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π
  return 'ru';
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API –æ—Ç–≤–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
 * 
 * @param data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
 * @param fieldsToTranslate - –ü–æ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 * @param language - –Ø–∑—ã–∫ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 * @param message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
 * @returns –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –æ—Ç–≤–µ—Ç
 */
export function createLocalizedResponse(
  data: any,
  fieldsToTranslate: string[],
  language: SupportedLanguage = 'ru',
  message: string = 'Success'
) {
  let localizedData;
  
  if (Array.isArray(data)) {
    localizedData = localizeArray(data, fieldsToTranslate, language);
  } else if (data && typeof data === 'object') {
    localizedData = localizeObject(data, fieldsToTranslate, language);
  } else {
    localizedData = data;
  }
  
  return {
    success: true,
    data: localizedData,
    message,
    language // –£–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–æ–π —è–∑—ã–∫ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
  };
}

/**
 * Centralized tour mapper - eliminates direct tour.category references
 * Maps tour data with proper localization and safe category handling
 */
export function mapTour(tour: any, language: SupportedLanguage = 'ru', options: { includeRaw?: boolean; removeImages?: boolean } = {}) {
  const { includeRaw = false, removeImages = false } = options;
  
  try {
    const mappedTour = {
      ...tour,
      title: parseMultilingualField(tour.title, language),
      description: parseMultilingualField(tour.description, language),
      shortDesc: tour.shortDesc ? parseMultilingualField(tour.shortDesc, language) : null,
      hasImages: !!(tour.mainImage || tour.images),
      // Safe category handling - no JSON parsing needed for Category.name (String type)
      category: tour.category ? {
        id: tour.category.id,
        name: tour.category.name // Category.name is String, not JSON - no parsing needed
      } : null
    };

    // Remove images for performance if requested
    if (removeImages) {
      delete mappedTour.mainImage;
      delete mappedTour.images;
    }

    // Add raw JSON for admin if requested
    if (includeRaw) {
      mappedTour._raw = {
        title: safeJsonParse(tour.title),
        description: safeJsonParse(tour.description),
        shortDesc: tour.shortDesc ? safeJsonParse(tour.shortDesc) : null
      };
    }

    return mappedTour;
  } catch (error) {
    console.error('Error mapping tour:', error, 'Tour ID:', tour.id);
    // Fallback with safe defaults
    return {
      ...tour,
      title: tour.title || '',
      description: tour.description || '',
      shortDesc: tour.shortDesc || null,
      hasImages: !!(tour.mainImage || tour.images),
      category: tour.category ? {
        id: tour.category.id,
        name: tour.category.name
      } : null
    };
  }
}