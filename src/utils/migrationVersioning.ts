import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * üìù –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –ë–î
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
 */

export interface MigrationInfo {
  version: string;
  name: string;
  description?: string;
  isSystem: boolean;
}

// üî¢ –¢–µ–∫—É—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å execution handlers
const SYSTEM_MIGRATIONS: MigrationInfo[] = [
  {
    version: '1.0.0',
    name: 'Initial Database Setup',
    description: '–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Å—Ç—Ä–∞–Ω, –≥–æ—Ä–æ–¥–æ–≤, –±–ª–æ–∫–æ–≤ —Ç—É—Ä–æ–≤',
    isSystem: true
  },
  {
    version: '1.1.0', 
    name: 'TourBlock Assignments Migration',
    description: '–ú–∏–≥—Ä–∞—Ü–∏—è –∫ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ TourBlockAssignment many-to-many',
    isSystem: true
  },
  {
    version: '1.2.0',
    name: 'Migration Versioning System',
    description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö',
    isSystem: true
  }
];

/**
 * üîß Migration execution handlers - –∫–∞–∂–¥–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–µ
 */
const MIGRATION_HANDLERS: Record<string, () => Promise<void>> = {
  '1.0.0': async () => {
    // Handled by full initializeDatabase() logic
    console.log('‚úÖ Migration 1.0.0: Full database initialization executed');
  },
  
  '1.1.0': async () => {
    // TourBlock migration was already executed in previous tasks
    console.log('‚úÖ Migration 1.1.0: TourBlock assignments system was already migrated in previous work');
    console.log('   - Removed deprecated Tour.tourBlockId fields');  
    console.log('   - Updated all controllers to use TourBlockAssignment system');
    console.log('   - Applied database schema changes');
  },
  
  '1.2.0': async () => {
    // Migration versioning system setup
    console.log('‚úÖ Migration 1.2.0: Migration versioning system installed');
  }
};

/**
 * üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±—ã–ª–∞ –ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è
 */
export async function isMigrationApplied(version: string): Promise<boolean> {
  try {
    // @ts-ignore - Prisma client –±—É–¥–µ—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
    const migration = await (prisma as any).migration.findUnique({
      where: { version }
    });
    return !!migration;
  } catch (error) {
    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ migrations –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–æ—Å—å
    console.log('üîÑ –¢–∞–±–ª–∏—Ü–∞ migrations –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...');
    return false;
  }
}

/**
 * ‚úÖ –ü–æ–º–µ—á–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—É—é 
 */
export async function markMigrationAsApplied(migrationInfo: MigrationInfo): Promise<void> {
  try {
    // @ts-ignore - Prisma client –±—É–¥–µ—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
    await (prisma as any).migration.create({
      data: {
        version: migrationInfo.version,
        name: migrationInfo.name,
        description: migrationInfo.description,
        isSystem: migrationInfo.isSystem
      }
    });
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migrationInfo.version} (${migrationInfo.name}) –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ ${migrationInfo.version}:`, error);
  }
}

/**
 * üìä –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
 */
export async function getSystemMigrationStatus(): Promise<{ 
  applied: string[], 
  pending: string[],
  shouldRunInitialization: boolean 
}> {
  const applied: string[] = [];
  const pending: string[] = [];
  
  for (const migration of SYSTEM_MIGRATIONS) {
    const isApplied = await isMigrationApplied(migration.version);
    if (isApplied) {
      applied.push(migration.version);
    } else {
      pending.push(migration.version);
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 1.0.0, –∑–Ω–∞—á–∏—Ç –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
  const shouldRunInitialization = !applied.includes('1.0.0');
  
  return { applied, pending, shouldRunInitialization };
}

/**
 * üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º pending migrations
 */
export async function safeInitializeWithVersioning(): Promise<boolean> {
  console.log('üîí –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º...');
  
  const status = await getSystemMigrationStatus();
  
  console.log(`üìã –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:`);
  console.log(`   –ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ: ${status.applied.length} (${status.applied.join(', ')})`);
  console.log(`   –û–∂–∏–¥–∞—é—â–∏–µ: ${status.pending.length} (${status.pending.join(', ')})`);
  
  if (status.shouldRunInitialization) {
    console.log('üöÄ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    return true; // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  } else {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–≤–µ—Ä—Å–∏—è 1.0.0 –ø—Ä–∏–º–µ–Ω–µ–Ω–∞)');
    
    // üîß –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ pending –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    if (status.pending.length > 0) {
      console.log(`üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ pending –º–∏–≥—Ä–∞—Ü–∏–π: ${status.pending.join(', ')}`);
      
      for (const migrationVersion of status.pending) {
        const migration = SYSTEM_MIGRATIONS.find(m => m.version === migrationVersion);
        const handler = MIGRATION_HANDLERS[migrationVersion];
        
        if (migration && handler) {
          console.log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ ${migrationVersion}: ${migration.name}`);
          
          try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º specific –ª–æ–≥–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏
            await handler();
            
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—É—é –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ successful execution
            await markMigrationAsApplied(migration);
            
            console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migrationVersion} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${migrationVersion}:`, error);
            throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ${migrationVersion}. –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.`);
          }
        } else {
          console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω handler –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${migrationVersion}`);
          throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${migrationVersion}. –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.`);
        }
      }
      
      console.log('‚úÖ –í—Å–µ pending –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    }
    
    return false; // –ë–î –≥–æ—Ç–æ–≤–∞, pending –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
  }
}

/**
 * üéØ –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –≤—ã–ø–æ–ª–Ω—è—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export async function completeInitialization(): Promise<void> {
  console.log('üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –∏—Ö handlers  
  for (const migration of SYSTEM_MIGRATIONS) {
    const isApplied = await isMigrationApplied(migration.version);
    
    if (!isApplied) {
      const handler = MIGRATION_HANDLERS[migration.version];
      
      if (handler) {
        console.log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.version}: ${migration.name}`);
        
        try {
          // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏
          await handler();
          
          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—É—é –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ successful execution  
          await markMigrationAsApplied(migration);
          
          console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migration.version} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.version}:`, error);
          throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.version} –≤ completeInitialization.`);
        }
      } else {
        console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω handler –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.version}`);
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.version}`);
      }
    } else {
      console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migration.version} —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`);
    }
  }
  
  console.log('‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
}