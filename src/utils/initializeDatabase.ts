/**
 * üóÑÔ∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ.
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è.
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * üè∑Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –Ω–∞–±–æ—Ä—É (15 –∏—Å—Ç–∏–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
 */
async function migrateCategoriesToCorrectSet() {
    console.log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –Ω–∞–±–æ—Ä—É...');
    
    // üéØ –ò–°–¢–ò–ù–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–º—É –º–µ–Ω—é —Å–∞–π—Ç–∞
    const correctCategories = [
        { name: JSON.stringify({ en: "Day Tours", ru: "–û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ" }) },
        { name: JSON.stringify({ en: "Multi-day Tours", ru: "–ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ" }) },
        { name: JSON.stringify({ en: "Excursions", ru: "–≠–∫—Å–∫—É—Ä—Å–∏–∏" }) },
        { name: JSON.stringify({ en: "City Tours", ru: "–ì–æ—Ä–æ–¥—Å–∫–∏–µ —Ç—É—Ä—ã" }) },
        { name: JSON.stringify({ en: "Nature/Ecological Tours", ru: "–ü—Ä–∏—Ä–æ–¥–∞/—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—É—Ä—ã" }) },
        { name: JSON.stringify({ en: "Cultural & Educational Tours", ru: "–ö—É–ª—å—Ç—É—Ä–Ω–æ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—É—Ä—ã" }) },
        { name: JSON.stringify({ en: "Historical Tours", ru: "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç—É—Ä—ã" }) },
        { name: JSON.stringify({ en: "Hiking/Trekking", ru: "–ü–æ—Ö–æ–¥—ã/—Ç—Ä–µ–∫–∫–∏–Ω–≥–∏" }) },
        { name: JSON.stringify({ en: "Mountain Landscapes", ru: "–ì–æ—Ä–Ω—ã–µ –ª–∞–Ω–¥—à–∞—Ñ—Ç—ã" }) },
        { name: JSON.stringify({ en: "Lake Landscapes", ru: "–û–∑–µ—Ä–Ω—ã–µ –ª–∞–Ω–¥—à–∞—Ñ—Ç—ã" }) },
        { name: JSON.stringify({ en: "Adventure Tours", ru: "–ü—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–µ —Ç—É—Ä—ã" }) },
        { name: JSON.stringify({ en: "Gastronomic Tours", ru: "–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ç—É—Ä—ã" }) },
        { name: JSON.stringify({ en: "Auto Tours/Safari/Jeep Tours", ru: "–ê–≤—Ç–æ—Ç—É—Ä—ã/—Å–∞—Ñ–∞—Ä–∏/–¥–∂–∏–ø-—Ç—É—Ä—ã" }) },
        { name: JSON.stringify({ en: "Agrotourism", ru: "–ê–≥—Ä–æ—Ç—É—Ä—ã" }) },
        { name: JSON.stringify({ en: "VIP Tours", ru: "VIP —Ç—É—Ä—ã" }) }
    ];
    
    try {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤)
        const existingCategories = await prisma.category.findMany({
            include: { _count: { select: { tours: true } } }
        });
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingCategories.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for (const category of existingCategories) {
            if (category._count.tours === 0) {
                await prisma.category.delete({ where: { id: category.id } });
                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}`);
            } else {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ç—É—Ä–∞–º–∏: ${category.name} (${category._count.tours} —Ç—É—Ä–æ–≤)`);
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ 15 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for (const category of correctCategories) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            const existing = await prisma.category.findFirst({
                where: { name: category.name }
            });
            
            if (!existing) {
                await prisma.category.create({ data: category });
                const parsed = JSON.parse(category.name);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${parsed.ru}`);
            } else {
                const parsed = JSON.parse(category.name);
                console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${parsed.ru}`);
            }
        }
        
        console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ${correctCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        throw error;
    }
}

/**
 * üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—É—Å—Ç—ã—Ö –ë–î)
 */
async function createDefaultCategories() {
    console.log('üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
    
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é
    await migrateCategoriesToCorrectSet();
}

/**
 * üìã –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ —Ç—É—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
async function createDefaultTourBlocks() {
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ —Ç—É—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
    
    const tourBlocks = [
        {
            title: JSON.stringify({ ru: "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—É—Ä—ã", en: "Popular Tours" }),
            description: JSON.stringify({ ru: "–°–∞–º—ã–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏", en: "Most popular tours of our company" }),
            slug: "popular-tours",
            isActive: true,
            sortOrder: 1
        },
        {
            title: JSON.stringify({ ru: "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã –ø–æ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ê–∑–∏–∏", en: "Recommended Central Asia Tours" }),
            description: JSON.stringify({ ru: "–õ—É—á—à–∏–µ —Ç—É—Ä—ã –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ê–∑–∏–µ–π", en: "Best tours to discover Central Asia" }),
            slug: "recommended-central-asia",
            isActive: true,
            sortOrder: 2
        },
        {
            title: JSON.stringify({ ru: "–¢—É—Ä—ã –ø–æ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω—É", en: "Tajikistan Tours" }),
            description: JSON.stringify({ ru: "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –∫—Ä–∞—Å–æ—Ç—ã –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞", en: "Discover the beauty of Tajikistan" }),
            slug: "tajikistan-tours",
            isActive: true,
            sortOrder: 3
        },
        {
            title: JSON.stringify({ ru: "–¢—É—Ä—ã –ø–æ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω—É", en: "Uzbekistan Tours" }),
            description: JSON.stringify({ ru: "–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥—Ä–µ–≤–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞", en: "Explore ancient cities of Uzbekistan" }),
            slug: "uzbekistan-tours",
            isActive: true,
            sortOrder: 4
        },
        {
            title: JSON.stringify({ ru: "–¢—É—Ä—ã –ø–æ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω—É", en: "Kyrgyzstan Tours" }),
            description: JSON.stringify({ ru: "–ì–æ—Ä–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ", en: "Mountain adventures in Kyrgyzstan" }),
            slug: "kyrgyzstan-tours",
            isActive: true,
            sortOrder: 5
        },
        {
            title: JSON.stringify({ ru: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç—É—Ä—ã", en: "Exclusive Tours" }),
            description: JSON.stringify({ ru: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", en: "Unique and exclusive tour programs" }),
            slug: "exclusive-tours",
            isActive: true,
            sortOrder: 6
        }
    ];
    
    for (const block of tourBlocks) {
        await prisma.tourBlock.create({
            data: block
        });
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${tourBlocks.length} –±–ª–æ–∫–æ–≤ —Ç—É—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
}

/**
 * üåç –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
async function createDefaultCountries() {
    console.log('üåç –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
    
    const countries = [
        { name: "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω", nameRu: "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω", nameEn: "Tajikistan", code: "TJ" },
        { name: "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", nameRu: "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", nameEn: "Uzbekistan", code: "UZ" },
        { name: "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω", nameRu: "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω", nameEn: "Kyrgyzstan", code: "KG" },
        { name: "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", nameRu: "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", nameEn: "Kazakhstan", code: "KZ" },
        { name: "–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω", nameRu: "–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω", nameEn: "Turkmenistan", code: "TM" }
    ];
    
    for (const country of countries) {
        await prisma.country.create({
            data: country
        });
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${countries.length} —Å—Ç—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
}

/**
 * üèôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
async function createDefaultCities() {
    console.log('üèôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID —Å—Ç—Ä–∞–Ω
    const countries = await prisma.country.findMany();
    const countryMap = new Map();
    countries.forEach((country: any) => {
        countryMap.set(country.name, country.id);
    });
    
    const cities = [
        { name: "–î—É—à–∞–Ω–±–µ", nameRu: "–î—É—à–∞–Ω–±–µ", nameEn: "Dushanbe", countryId: countryMap.get("–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω") },
        { name: "–•—É–¥–∂–∞–Ω–¥", nameRu: "–•—É–¥–∂–∞–Ω–¥", nameEn: "Khujand", countryId: countryMap.get("–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω") },
        { name: "–•–æ—Ä–æ–≥", nameRu: "–•–æ—Ä–æ–≥", nameEn: "Khorog", countryId: countryMap.get("–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω") },
        { name: "–¢–∞—à–∫–µ–Ω—Ç", nameRu: "–¢–∞—à–∫–µ–Ω—Ç", nameEn: "Tashkent", countryId: countryMap.get("–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω") },
        { name: "–°–∞–º–∞—Ä–∫–∞–Ω–¥", nameRu: "–°–∞–º–∞—Ä–∫–∞–Ω–¥", nameEn: "Samarkand", countryId: countryMap.get("–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω") },
        { name: "–ë—É—Ö–∞—Ä–∞", nameRu: "–ë—É—Ö–∞—Ä–∞", nameEn: "Bukhara", countryId: countryMap.get("–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω") },
        { name: "–ë–∏—à–∫–µ–∫", nameRu: "–ë–∏—à–∫–µ–∫", nameEn: "Bishkek", countryId: countryMap.get("–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω") },
        { name: "–ê—Å—Ç–∞–Ω–∞", nameRu: "–ê—Å—Ç–∞–Ω–∞", nameEn: "Astana", countryId: countryMap.get("–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω") },
        { name: "–ê–ª–º–∞—Ç—ã", nameRu: "–ê–ª–º–∞—Ç—ã", nameEn: "Almaty", countryId: countryMap.get("–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω") },
        { name: "–ê—à—Ö–∞–±–∞–¥", nameRu: "–ê—à—Ö–∞–±–∞–¥", nameEn: "Ashgabat", countryId: countryMap.get("–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω") }
    ];
    
    for (const city of cities) {
        if (city.countryId) {
            await prisma.city.create({
                data: city
            });
        }
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${cities.length} –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
}

/**
 * üé¨ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∞–π–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
async function createDefaultSlides() {
    console.log('üé¨ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∞–π–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
    
    const slides = [
        {
            title: JSON.stringify({ 
                ru: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –ê–∑–∏—é", 
                en: "Welcome to Central Asia" 
            }),
            description: JSON.stringify({ 
                ru: "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ–π–∑–∞–∂–∏ –∏ –±–æ–≥–∞—Ç—É—é –∫—É–ª—å—Ç—É—Ä—É —Ä–µ–≥–∏–æ–Ω–∞", 
                en: "Discover amazing landscapes and rich culture of the region" 
            }),
            image: "/public/images/default-slide-1.jpg",
            link: "/tours",
            isActive: true,
            order: 1
        },
        {
            title: JSON.stringify({ 
                ru: "–ù–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", 
                en: "Unforgettable Adventures" 
            }),
            description: JSON.stringify({ 
                ru: "–ì–æ—Ä—ã, –æ–∑–µ—Ä–∞, –¥—Ä–µ–≤–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ - –≤—Å–µ —ç—Ç–æ –∂–¥–µ—Ç –≤–∞—Å", 
                en: "Mountains, lakes, ancient cities - all this awaits you" 
            }),
            image: "/public/images/default-slide-2.jpg", 
            link: "/tours",
            isActive: true,
            order: 2
        },
        {
            title: JSON.stringify({ 
                ru: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –≥–∏–¥—ã", 
                en: "Expert Guides" 
            }),
            description: JSON.stringify({ 
                ru: "–ù–∞—à–∏ –æ–ø—ã—Ç–Ω—ã–µ –≥–∏–¥—ã –ø–æ–∫–∞–∂—É—Ç –≤–∞–º –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ —Ä–µ–≥–∏–æ–Ω–∞", 
                en: "Our experienced guides will show you the best places in the region" 
            }),
            image: "/public/images/default-slide-3.jpg",
            link: "/guides", 
            isActive: true,
            order: 3
        }
    ];
    
    for (const slide of slides) {
        await prisma.slide.create({
            data: slide
        });
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${slides.length} —Å–ª–∞–π–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
}

/**
 * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function checkDatabaseInitialization() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const [categoryCount, tourBlockCount, countryCount, cityCount, slideCount] = await Promise.all([
            prisma.category.count(),
            prisma.tourBlock.count(),
            prisma.country.count(),
            prisma.city.count(),
            prisma.slide.count()
        ]);
        
        console.log(`üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î:`);
        console.log(`   Categories: ${categoryCount}`);
        console.log(`   Tour Blocks: ${tourBlockCount}`);
        console.log(`   Countries: ${countryCount}`);
        console.log(`   Cities: ${cityCount}`);
        console.log(`   Slides: ${slideCount}`);
        
        return {
            categories: categoryCount,
            tourBlocks: tourBlockCount,
            countries: countryCount,
            cities: cityCount,
            slides: slideCount
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î:', error);
        return null;
    }
}

/**
 * üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
 */
export async function initializeDatabase() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        const stats = await checkDatabaseInitialization();
        
        if (!stats) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
            return false;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –º–∏–≥—Ä–∏—Ä—É–µ–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –Ω–∞–±–æ—Ä—É –∏–∑ 15 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if (stats.categories !== 15) {
            console.log(`üîÑ –ö–∞—Ç–µ–≥–æ—Ä–∏–π ${stats.categories}, –Ω—É–∂–Ω–æ 15. –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...`);
            await createDefaultCategories();
        } else {
            console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ (15), –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...');
            await createDefaultCategories(); // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        }
        
        if (stats.countries === 0) {
            await createDefaultCountries();
        } else {
            console.log('‚úÖ –°—Ç—Ä–∞–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ');
        }
        
        if (stats.cities === 0) {
            await createDefaultCities();
        } else {
            console.log('‚úÖ –ì–æ—Ä–æ–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ');
        }
        
        if (stats.tourBlocks === 0) {
            await createDefaultTourBlocks();
        } else {
            console.log('‚úÖ –ë–ª–æ–∫–∏ —Ç—É—Ä–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ');
        }
        
        if (stats.slides === 0) {
            await createDefaultSlides();
        } else {
            console.log('‚úÖ –°–ª–∞–π–¥—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ');
        }
        
        console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        await checkDatabaseInitialization();
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
        return false;
    } finally {
        await prisma.$disconnect();
    }
}

/**
 * üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 */
export async function forceResetDatabase() {
    console.log('üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î...');
    
    try {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        await prisma.tourBlockAssignment.deleteMany();
        await prisma.slide.deleteMany();
        await prisma.city.deleteMany();
        await prisma.country.deleteMany();
        await prisma.tourBlock.deleteMany();
        await prisma.category.deleteMany();
        
        console.log('üóëÔ∏è –í—Å–µ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
        await initializeDatabase();
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ë–î:', error);
        return false;
    }
}