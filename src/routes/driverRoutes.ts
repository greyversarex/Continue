import express from 'express';
import { authenticateDriver } from '../middleware/driverAuth';
import {
  loginDriver,
  getAllDrivers,
  getDriverById,
  createDriverProfile,
  updateDriverProfile,
  deleteDriver,
  getDriverOptions,
  getDriverAssignedEvents,
  startDriverEvent,
  completeDriverEvent,
  upload
} from '../controllers/driverController';

const router = express.Router();

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
router.post('/login', loginDriver);

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (–¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏) - —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
router.post('/create-with-auth', upload.fields([
  { name: 'avatar', maxCount: 1 },
  { name: 'documents', maxCount: 10 },
  { name: 'vehiclePhotos', maxCount: 5 }
]), createDriverProfile);

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –≤–æ–¥–∏—Ç–µ–ª—è (–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å) - —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
router.put('/profile/:id', upload.fields([
  { name: 'avatar', maxCount: 1 },
  { name: 'documents', maxCount: 10 },
  { name: 'vehiclePhotos', maxCount: 5 }
]), updateDriverProfile);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏)
router.get('/', getAllDrivers);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ç–∏–ø—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤)
router.get('/options/vehicle-types', getDriverOptions);

// –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –ë–ï–ó middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
router.get('/test-simple', (req, res) => {
  console.log('üß™ Simple test route called');
  res.json({
    success: true,
    message: '–ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString()
  });
});

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ä–∞–±–æ—á–∏–π API –¥–ª—è —Å–æ–±—ã—Ç–∏–π –≤–æ–¥–∏—Ç–µ–ª—è (–±–µ–∑ middleware)
router.get('/my-events-simple', async (req, res) => {
  console.log('üß™ Simple events route called');
  console.log('   - Authorization header:', req.headers.authorization ? 'Present' : 'Missing');
  
  try {
    res.json({
      success: true,
      data: [
        {
          id: '9-0',
          tourId: 9,
          tourTitle: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä',
          eventIndex: 0,
          time: '09:00',
          title: '–ü–æ–µ–∑–¥–∫–∞ –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç',
          description: '–í—Å—Ç—Ä–µ—á–∞ —Ç—É—Ä–∏—Å—Ç–æ–≤ –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç—É',
          status: 'pending'
        },
        {
          id: '9-1', 
          tourId: 9,
          tourTitle: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä',
          eventIndex: 1,
          time: '14:00',
          title: '–≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –≥–æ—Ä–æ–¥—É',
          description: '–û–±–∑–æ—Ä–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è',
          status: 'started'
        }
      ],
      message: '–¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
    });
  } catch (error) {
    console.error('‚ùå Error in simple events:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π'
    });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ middleware
router.get('/test-auth', authenticateDriver, (req, res) => {
  console.log('üß™ Test auth route called');
  console.log('  - Driver ID from req:', (req as any).driverId);
  res.json({
    success: true,
    message: 'Middleware —Ä–∞–±–æ—Ç–∞–µ—Ç',
    driverId: (req as any).driverId,
    driver: (req as any).driver?.name
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–æ–¥–∏—Ç–µ–ª—è (inline –≤–µ—Ä—Å–∏—è)
router.get('/my-events', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.startsWith('Bearer ') ? authHeader.slice(7) : null;
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      });
    }

    const jwt = require('jsonwebtoken');
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'driver-secret-key');
    const driverId = decoded.driverId;
    
    if (!driverId) {
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏, –≥–¥–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–∞–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    
    const tours = await prisma.tour.findMany({
      where: {
        isActive: true,
        itinerary: {
          contains: `"driverId":${driverId}`
        }
      },
      select: {
        id: true,
        title: true,
        itinerary: true,
        startDate: true,
        endDate: true,
        status: true
      }
    });

    // –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–∞–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å
    const assignedEvents: any[] = [];
    
    tours.forEach((tour: any) => {
      if (tour.itinerary) {
        try {
          const itinerary = JSON.parse(tour.itinerary);
          itinerary.forEach((event: any, index: number) => {
            if (event.driverId && parseInt(event.driverId) === driverId) {
              assignedEvents.push({
                id: `${tour.id}-${index}`,
                tourId: tour.id,
                tourTitle: tour.title,
                eventIndex: index,
                time: event.time,
                title: event.title,
                description: event.description,
                status: event.status || 'pending',
                tourStatus: tour.status,
                startDate: tour.startDate,
                endDate: tour.endDate,
                startedAt: event.startedAt,
                completedAt: event.completedAt
              });
            }
          });
        } catch (e) {
          console.warn('Error parsing itinerary for tour', tour.id, e);
        }
      }
    });

    res.json({
      success: true,
      data: assignedEvents,
      message: '–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
    });
    return;

  } catch (error) {
    console.error('‚ùå Error getting driver assigned events:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π'
    });
    return;
  }
});

// –ó–∞–ø—É—Å–∫ —Å–æ–±—ã—Ç–∏—è (inline –≤–µ—Ä—Å–∏—è)
router.post('/events/:eventId/start', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.startsWith('Bearer ') ? authHeader.slice(7) : null;
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      });
    }

    const jwt = require('jsonwebtoken');
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'driver-secret-key');
    const driverId = decoded.driverId;
    const { eventId } = req.params;
    
    if (!driverId || !eventId) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã driverId –∏ eventId'
      });
    }

    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();

    const [tourId, eventIndex] = eventId.split('-');
    const tour = await prisma.tour.findUnique({
      where: { id: parseInt(tourId) }
    });

    if (!tour || !tour.itinerary) {
      return res.status(404).json({
        success: false,
        message: '–¢—É—Ä –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      });
    }

    const itinerary = JSON.parse(tour.itinerary);
    const eventIdx = parseInt(eventIndex);
    
    if (eventIdx >= itinerary.length || itinerary[eventIdx].driverId !== driverId) {
      return res.status(403).json({
        success: false,
        message: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è
    itinerary[eventIdx].status = 'started';
    itinerary[eventIdx].startedAt = new Date().toISOString();

    await prisma.tour.update({
      where: { id: parseInt(tourId) },
      data: { itinerary: JSON.stringify(itinerary) }
    });

    res.json({
      success: true,
      message: '–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—â–µ–Ω–æ'
    });
    return;

  } catch (error) {
    console.error('‚ùå Error starting driver event:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ–±—ã—Ç–∏—è'
    });
    return;
  }
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (inline –≤–µ—Ä—Å–∏—è)
router.post('/events/:eventId/complete', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.startsWith('Bearer ') ? authHeader.slice(7) : null;
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      });
    }

    const jwt = require('jsonwebtoken');
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'driver-secret-key');
    const driverId = decoded.driverId;
    const { eventId } = req.params;
    
    if (!driverId || !eventId) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã driverId –∏ eventId'
      });
    }

    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();

    const [tourId, eventIndex] = eventId.split('-');
    const tour = await prisma.tour.findUnique({
      where: { id: parseInt(tourId) }
    });

    if (!tour || !tour.itinerary) {
      return res.status(404).json({
        success: false,
        message: '–¢—É—Ä –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      });
    }

    const itinerary = JSON.parse(tour.itinerary);
    const eventIdx = parseInt(eventIndex);
    
    if (eventIdx >= itinerary.length || itinerary[eventIdx].driverId !== driverId) {
      return res.status(403).json({
        success: false,
        message: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è
    itinerary[eventIdx].status = 'completed';
    itinerary[eventIdx].completedAt = new Date().toISOString();

    await prisma.tour.update({
      where: { id: parseInt(tourId) },
      data: { itinerary: JSON.stringify(itinerary) }
    });

    res.json({
      success: true,
      message: '–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
    });
    return;

  } catch (error) {
    console.error('‚ùå Error completing driver event:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è'
    });
    return;
  }
});

// –í–ê–ñ–ù–û: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã (—Å :id) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –í –ö–û–ù–¶–ï
// —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ ID (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
router.get('/:id', getDriverById);

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
router.delete('/:id', deleteDriver);

export default router;