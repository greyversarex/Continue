import { Request, Response } from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import nodemailer from 'nodemailer';
import multer from 'multer';
import path from 'path';
import fs from 'fs/promises';
import { parseMultilingualField } from '../utils/multilingual';
import prisma from '../config/database';
const JWT_SECRET = process.env.JWT_SECRET || 'tour-guide-secret-key';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: async (req, file, cb) => {
    const uploadPath = path.join(process.cwd(), 'uploads', 'guides');
    try {
      await fs.mkdir(uploadPath, { recursive: true });
    } catch (error) {
      console.error('Error creating upload directory:', error);
    }
    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const extension = path.extname(file.originalname);
    cb(null, `${file.fieldname}-${uniqueSuffix}${extension}`);
  }
});

const fileFilter = (req: any, file: Express.Multer.File, cb: multer.FileFilterCallback) => {
  // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
  const allowedTypes = [
    'image/jpeg', 'image/jpg', 'image/png', 'image/webp', // –î–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
    'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' // –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  ];
  
  if (allowedTypes.includes(file.mimetype)) {
    cb(null, true);
  } else {
    cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPG, PNG, WEBP, PDF, DOC, DOCX'));
  }
};

export const upload = multer({
  storage,
  fileFilter,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB –ª–∏–º–∏—Ç
  }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç—É—Ä–≥–∏–¥–∞
export const loginTourGuide = async (req: Request, res: Response): Promise<void> => {
  try {
    const { login, password } = req.body;

    if (!login || !password) {
      res.status(400).json({ 
        success: false, 
        message: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
      return;
    }

    // –ù–∞–π—Ç–∏ —Ç—É—Ä–≥–∏–¥–∞ –ø–æ –ª–æ–≥–∏–Ω—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É guide)
    const guide = await prisma.guide.findFirst({
      where: { login },
      select: {
        id: true,
        name: true,
        login: true,
        password: true,
        contact: true,
        isActive: true
      }
    });

    if (!guide) {
      res.status(401).json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
      return;
    }

    if (!guide.isActive) {
      res.status(403).json({ 
        success: false, 
        message: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' 
      });
      return;
    }

    // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    let validPassword = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ null
    if (!guide.password) {
      res.status(401).json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
      return;
    }
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (–Ω–æ–≤—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±)
      validPassword = await bcrypt.compare(password, guide.password);
    } catch (error) {
      // –ï—Å–ª–∏ bcrypt.compare –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–∞—Ä—ã–π –Ω–µ—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
      // –í–†–ï–ú–ï–ù–ù–ê–Ø –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–∏–¥–æ–≤ (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è)
      console.warn('‚ö†Ô∏è Legacy password check for guide:', guide.login);
      validPassword = password === guide.password;
      
      // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–ª –∏ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–±–Ω–æ–≤–∏–º –µ–≥–æ –Ω–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
      if (validPassword) {
        try {
          const hashedPassword = await bcrypt.hash(password, 10);
          await prisma.guide.update({
            where: { id: guide.id },
            data: { password: hashedPassword }
          });
          console.log('‚úÖ Password migrated to hash for guide:', guide.login);
        } catch (updateError) {
          console.error('‚ùå Failed to migrate password to hash:', updateError);
        }
      }
    }
    
    if (!validPassword) {
      res.status(401).json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
      return;
    }

    // –°–æ–∑–¥–∞—Ç—å JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { 
        id: guide.id, 
        login: guide.login, 
        name: guide.name,
        type: 'tour-guide'
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    console.log('üîë Tour guide login successful:', guide.login);

    res.json({
      success: true,
      token,
      guide: {
        id: guide.id,
        name: guide.name,
        login: guide.login,
        email: guide.contact ? (typeof guide.contact === 'string' ? JSON.parse(guide.contact).email : (guide.contact as any).email) : null,
        phone: guide.contact ? (typeof guide.contact === 'string' ? JSON.parse(guide.contact).phone : (guide.contact as any).phone) : null
      },
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
    });

  } catch (error) {
    console.error('‚ùå Tour guide login error:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤ –¥–ª—è —Ç—É—Ä–≥–∏–¥–∞
export const getGuideTours = async (req: Request, res: Response): Promise<void> => {
  try {
    const guideId = (req as any).user?.id;

    if (!guideId) {
      res.status(401).json({ 
        success: false, 
        message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' 
      });
      return;
    }

    const tours = await prisma.tour.findMany({
      where: { 
        isActive: true,
        tourGuides: {
          some: {
            guideId: guideId
          }
        }
      },
      include: {
        bookings: {
          where: { status: { in: ['paid', 'confirmed'] } }
        },
        category: true,
        tourBlock: true
      },
      orderBy: {
        scheduledStartDate: 'asc'
      }
    });

    // –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–∏—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–∞
    const toursWithStats = tours.map(tour => {
      const totalTourists = tour.bookings.reduce((sum, booking) => {
        return sum + booking.numberOfTourists;
      }, 0);

      return {
        id: tour.id,
        uniqueCode: tour.uniqueCode,
        title: tour.title,
        scheduledStartDate: tour.scheduledStartDate,
        scheduledEndDate: tour.scheduledEndDate,
        status: tour.status,
        totalTourists,
        bookingsCount: tour.bookings.length,
        category: tour.category,
        tourBlock: tour.tourBlock
      };
    });

    console.log(`üìã Found ${tours.length} tours for guide ${guideId}`);

    res.json({
      success: true,
      data: toursWithStats
    });

  } catch (error) {
    console.error('‚ùå Error getting guide tours:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—É—Ä–∞ –¥–ª—è —Ç—É—Ä–≥–∏–¥–∞
export const getTourDetails = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const guideId = (req as any).user?.id;
    const tourId = parseInt(id);

    if (!tourId) {
      res.status(400).json({ 
        success: false, 
        message: 'ID —Ç—É—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
      return;
    }

    const tour = await prisma.tour.findFirst({
      where: { 
        id: tourId,
        isActive: true,
        tourGuides: {
          some: {
            guideId: guideId
          }
        }
      },
      include: {
        bookings: {
          where: { status: { in: ['paid', 'confirmed'] } },
          include: {
            tour: true,
            hotel: true
          }
        },
        category: true,
        tourBlock: true,
        reviews: {
          where: { isApproved: true }
        },
        guideReviews: {
          where: { guideId: guideId }
        },
        tourGuides: {
          include: {
            guide: true
          }
        }
      }
    });

    if (!tour) {
      res.status(404).json({ 
        success: false, 
        message: '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
      return;
    }

    // –ò–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–∏—Å—Ç–æ–≤ –∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    const tourists: any[] = [];
    tour.bookings.forEach(booking => {
      if (booking.tourists) {
        try {
          const bookingTourists = JSON.parse(booking.tourists);
          bookingTourists.forEach((tourist: any) => {
            tourists.push({
              ...tourist,
              bookingId: booking.id,
              contactEmail: booking.contactEmail,
              contactPhone: booking.contactPhone
            });
          });
        } catch (e) {
          console.warn('Error parsing tourists data:', e);
        }
      }
    });

    const tourDetails = {
      id: tour.id,
      uniqueCode: tour.uniqueCode,
      title: tour.title,
      description: tour.description,
      itinerary: tour.itinerary,
      scheduledStartDate: tour.scheduledStartDate,
      scheduledEndDate: tour.scheduledEndDate,
      status: tour.status,
      bookings: tour.bookings,
      tourists: tourists,
      totalTourists: tourists.length,
      category: tour.category,
      tourBlock: tour.tourBlock,
      reviews: tour.reviews,
      guideReview: tour.guideReviews[0] || null
    };

    res.json({
      success: true,
      data: tourDetails
    });

  } catch (error) {
    console.error('‚ùå Error getting tour details:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –ù–∞—á–∞—Ç—å —Ç—É—Ä
export const startTour = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const guideId = (req as any).user?.id;
    const tourId = parseInt(id);

    const tour = await prisma.tour.findFirst({
      where: { 
        id: tourId,
        assignedGuideId: guideId,
        status: 'pending'
      }
    });

    if (!tour) {
      res.status(404).json({ 
        success: false, 
        message: '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –Ω–∞—á–∞—Ç' 
      });
      return;
    }

    const updatedTour = await prisma.tour.update({
      where: { id: tourId },
      data: { 
        status: 'active' 
      }
    });

    console.log(`üöÄ Tour ${tourId} started by guide ${guideId}`);

    res.json({
      success: true,
      data: updatedTour,
      message: '–¢—É—Ä –Ω–∞—á–∞—Ç'
    });

  } catch (error) {
    console.error('‚ùå Error starting tour:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä
export const finishTour = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const guideId = (req as any).user?.id;
    const tourId = parseInt(id);

    const tour = await prisma.tour.findFirst({
      where: { 
        id: tourId,
        assignedGuideId: guideId,
        status: 'active'
      }
    });

    if (!tour) {
      res.status(404).json({ 
        success: false, 
        message: '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' 
      });
      return;
    }

    const updatedTour = await prisma.tour.update({
      where: { id: tourId },
      data: { 
        status: 'finished' 
      }
    });

    console.log(`‚úÖ Tour ${tourId} finished by guide ${guideId}`);

    res.json({
      success: true,
      data: updatedTour,
      message: '–¢—É—Ä –∑–∞–≤–µ—Ä—à—ë–Ω'
    });

  } catch (error) {
    console.error('‚ùå Error finishing tour:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –°–æ–±—Ä–∞—Ç—å –æ—Ç–∑—ã–≤—ã (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å email —Ç—É—Ä–∏—Å—Ç–∞–º)
export const collectReviews = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { selectedTourists } = req.body;
    const guideId = (req as any).user?.id;
    const tourId = parseInt(id);

    if (!selectedTourists || !Array.isArray(selectedTourists)) {
      res.status(400).json({ 
        success: false, 
        message: '–°–ø–∏—Å–æ–∫ —Ç—É—Ä–∏—Å—Ç–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
      return;
    }

    const tour = await prisma.tour.findFirst({
      where: { 
        id: tourId,
        assignedGuideId: guideId,
        status: 'finished'
      }
    });

    if (!tour) {
      res.status(404).json({ 
        success: false, 
        message: '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω' 
      });
      return;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ nodemailer (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    const transporter = nodemailer.createTransport({
      host: 'smtp.gmail.com',
      port: 587,
      secure: false,
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });

    let emailsSent = 0;

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å email –∫–∞–∂–¥–æ–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—É—Ä–∏—Å—Ç—É
    for (const tourist of selectedTourists) {
      if (tourist.email) {
        try {
          const reviewLink = `${process.env.FRONTEND_URL}/review/${tourId}?tourist=${encodeURIComponent(tourist.email)}`;
          
          await transporter.sendMail({
            from: process.env.EMAIL_FROM,
            to: tourist.email,
            subject: '–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ç—É—Ä–µ',
            html: `
              <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${tourist.name}!</h2>
              <p>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–µ "${parseMultilingualField(tour.title, 'ru')}".</p>
              <p>–ú—ã –±—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ –≤—ã –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏:</p>
              <a href="${reviewLink}" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</a>
            `
          });
          
          emailsSent++;
        } catch (emailError) {
          console.warn('Failed to send email to:', tourist.email, emailError);
        }
      }
    }

    console.log(`üìß Sent ${emailsSent} review request emails for tour ${tourId}`);

    res.json({
      success: true,
      emailsSent,
      message: `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${emailsSent} –ø–∏—Å–µ–º —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤`
    });

  } catch (error) {
    console.error('‚ùå Error collecting reviews:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ç—É—Ä–≥–∏–¥–∞ –æ —Ç—É—Ä–µ
export const leaveGuideReview = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { content } = req.body;
    const guideId = (req as any).user?.id;
    const tourId = parseInt(id);

    if (!content || content.trim().length === 0) {
      res.status(400).json({ 
        success: false, 
        message: '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
      return;
    }

    const tour = await prisma.tour.findFirst({
      where: { 
        id: tourId,
        assignedGuideId: guideId,
        status: 'finished'
      }
    });

    if (!tour) {
      res.status(404).json({ 
        success: false, 
        message: '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω' 
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤ –æ—Ç —ç—Ç–æ–≥–æ —Ç—É—Ä–≥–∏–¥–∞
    const existingReview = await prisma.guideReview.findUnique({
      where: {
        tourId_guideId: {
          tourId: tourId,
          guideId: guideId
        }
      }
    });

    let review;
    if (existingReview) {
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
      review = await prisma.guideReview.update({
        where: { id: existingReview.id },
        data: { content: content.trim() }
      });
    } else {
      // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
      review = await prisma.guideReview.create({
        data: {
          tourId: tourId,
          guideId: guideId,
          content: content.trim()
        }
      });
    }

    console.log(`üí¨ Guide review ${existingReview ? 'updated' : 'created'} for tour ${tourId}`);

    res.json({
      success: true,
      data: review,
      message: '–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω'
    });

  } catch (error) {
    console.error('‚ùå Error leaving guide review:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–≥–∏–¥–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (–¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏)
export const createTourGuideProfile = async (req: Request, res: Response): Promise<void> => {
  try {
    const { name, description, login, password, email, phone, languages, experience, isActive, countryId, cityId, passportSeries, registration, residenceAddress } = req.body;
    const files = req.files as { [fieldname: string]: Express.Multer.File[] };

    console.log('üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–¥–∞:', req.body);
    console.log('üìÅ –ü–æ–ª—É—á–µ–Ω—ã —Ñ–∞–π–ª—ã:', files);

    if (!name || !email || !languages) {
      res.status(400).json({ 
        success: false, 
        message: '–ò–º—è, email –∏ —è–∑—ã–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
      return;
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
    let photoPath = null;
    if (files && files.avatar && files.avatar[0]) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –≤–µ–±–∞
      const fullPath = files.avatar[0].path;
      photoPath = fullPath.replace('/home/runner/workspace', '');
      console.log('üì∑ –ê–≤–∞—Ç–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', photoPath);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    let documentsArray: Array<{
      filename: string;
      originalName: string;
      path: string;
      size: number;
      mimeType: string;
    }> = [];
    if (files && files.documents && files.documents.length > 0) {
      documentsArray = files.documents.map(file => ({
        filename: file.filename,
        originalName: file.originalname,
        path: file.path.replace('/home/runner/workspace', ''), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        size: file.size,
        mimeType: file.mimetype
      }));
      console.log('üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', documentsArray.length);
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ Guide –≤–º–µ—Å—Ç–æ TourGuideProfile
    const guide = await prisma.guide.create({
      data: {
        name: name, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ JSON
        description: description || '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥',
        languages: languages, // –°—Ç—Ä–æ–∫–∞ —è–∑—ã–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        contact: JSON.stringify({ email, phone }), // –ö–æ–Ω—Ç–∞–∫—Ç—ã –≤ JSON
        experience: experience ? parseInt(experience) : 0,
        rating: 5.0, // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        login: login, // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
        password: hashedPassword, // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û: –•—Ä–∞–Ω–∏–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        isActive: isActive === 'true' || isActive === true,
        photo: photoPath, // –ü—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É
        documents: documentsArray.length > 0 ? JSON.stringify(documentsArray) : null, // –î–æ–∫—É–º–µ–Ω—Ç—ã –≤ JSON
        countryId: countryId ? parseInt(countryId) : null, // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É
        cityId: cityId ? parseInt(cityId) : null, // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥
        passportSeries: passportSeries || null, // –°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞
        registration: registration || null, // –ì–æ—Å. —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        residenceAddress: residenceAddress || null // –ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
      }
    });

    console.log('‚úÖ –ù–æ–≤—ã–π –≥–∏–¥ —Å–æ–∑–¥–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ Guide:', guide.id);

    res.status(201).json({
      success: true,
      data: {
        id: guide.id,
        name: guide.name,
        description: guide.description,
        languages: guide.languages,
        contact: guide.contact,
        experience: guide.experience,
        rating: guide.rating,
        isActive: guide.isActive,
        photo: guide.photo,
        documents: guide.documents
      },
      message: '–ì–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–¥–∞:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error instanceof Error ? error.message : 'Unknown error')
    });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≥–∏–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∞–π–ª–æ–≤
export const updateGuideProfile = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { name, description, email, phone, languages, experience, isActive } = req.body;
    const files = req.files as { [fieldname: string]: Express.Multer.File[] };
    const guideId = parseInt(id);

    console.log('üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∏–¥–∞:', req.body);
    console.log('üìÅ –ü–æ–ª—É—á–µ–Ω—ã —Ñ–∞–π–ª—ã:', files);

    if (!guideId) {
      res.status(400).json({ 
        success: false, 
        message: 'ID –≥–∏–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
      return;
    }

    // –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥–∏–¥–∞
    const existingGuide = await prisma.guide.findUnique({
      where: { id: guideId }
    });

    if (!existingGuide) {
      res.status(404).json({ 
        success: false, 
        message: '–ì–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
      return;
    }

    const updateData: any = {};
    
    if (name) updateData.name = name;
    if (description) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      if (typeof description === 'object' && description !== null) {
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å —è–∑—ã–∫–∞–º–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON
        updateData.description = JSON.stringify(description);
      } else if (typeof description === 'string') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å JSON-—Å—Ç—Ä–æ–∫–æ–π
        try {
          const parsedDesc = JSON.parse(description);
          if (typeof parsedDesc === 'object' && parsedDesc !== null) {
            // –≠—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            updateData.description = description;
          } else {
            // –≠—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            updateData.description = description;
          }
        } catch {
          // –≠—Ç–æ –Ω–µ JSON, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
          updateData.description = description;
        }
      }
    }
    if (languages) updateData.languages = languages;
    if (experience !== undefined) updateData.experience = parseInt(experience);
    if (isActive !== undefined) updateData.isActive = isActive;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
    if (email || phone) {
      const currentContact = existingGuide.contact ? JSON.parse(existingGuide.contact) : {};
      updateData.contact = JSON.stringify({
        email: email || currentContact.email,
        phone: phone || currentContact.phone
      });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
    if (files && files.avatar && files.avatar[0]) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –≤–µ–±–∞
      const fullPath = files.avatar[0].path;
      updateData.photo = fullPath.replace('/home/runner/workspace', '');
      console.log('üì∑ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω:', updateData.photo);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    if (files && files.documents && files.documents.length > 0) {
      const documentsArray = files.documents.map(file => ({
        filename: file.filename,
        originalName: file.originalname,
        path: file.path.replace('/home/runner/workspace', ''), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        size: file.size,
        mimeType: file.mimetype
      }));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
      let existingDocuments = [];
      try {
        existingDocuments = existingGuide.documents ? JSON.parse(existingGuide.documents) : [];
      } catch (e) {
        existingDocuments = [];
      }
      
      const allDocuments = [...existingDocuments, ...documentsArray];
      updateData.documents = JSON.stringify(allDocuments);
      console.log('üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –≤—Å–µ–≥–æ:', allDocuments.length);
    }

    const updatedGuide = await prisma.guide.update({
      where: { id: guideId },
      data: updateData
    });

    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –≥–∏–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', guideId);

    res.json({
      success: true,
      data: {
        id: updatedGuide.id,
        name: updatedGuide.name,
        description: updatedGuide.description,
        languages: updatedGuide.languages,
        contact: updatedGuide.contact,
        experience: updatedGuide.experience,
        isActive: updatedGuide.isActive,
        photo: updatedGuide.photo,
        documents: updatedGuide.documents
      },
      message: '–ü—Ä–æ—Ñ–∏–ª—å –≥–∏–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ñ–∞–π–ª–∞–º–∏'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∏–¥–∞:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error instanceof Error ? error.message : 'Unknown error')
    });
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –≥–∏–¥–∞
export const uploadGuideAvatar = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const guideId = parseInt(id);

    if (!guideId) {
      res.status(400).json({ 
        success: false, 
        message: 'ID –≥–∏–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
      return;
    }

    if (!req.file) {
      res.status(400).json({ 
        success: false, 
        message: '–§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' 
      });
      return;
    }

    const avatarPath = `/uploads/guides/${req.file.filename}`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updatedGuide = await prisma.guide.update({
      where: { id: guideId },
      data: { avatar: avatarPath }
    });

    console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –≥–∏–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', guideId, avatarPath);

    res.json({
      success: true,
      data: {
        avatarPath,
        guide: updatedGuide
      },
      message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: ' + (error instanceof Error ? error.message : 'Unknown error')
    });
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–∏–¥–∞
export const uploadGuideDocuments = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const guideId = parseInt(id);

    if (!guideId) {
      res.status(400).json({ 
        success: false, 
        message: 'ID –≥–∏–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
      return;
    }

    if (!req.files || !Array.isArray(req.files) || req.files.length === 0) {
      res.status(400).json({ 
        success: false, 
        message: '–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã' 
      });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const existingGuide = await prisma.guide.findUnique({
      where: { id: guideId }
    });

    let existingDocuments = [];
    if (existingGuide?.documents) {
      try {
        existingDocuments = JSON.parse(existingGuide.documents);
      } catch (e) {
        console.warn('Error parsing existing documents:', e);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const newDocuments = req.files.map((file: Express.Multer.File) => ({
      name: file.originalname,
      path: `/uploads/guides/${file.filename}`,
      type: file.mimetype,
      size: file.size,
      uploadedAt: new Date().toISOString()
    }));

    const allDocuments = [...existingDocuments, ...newDocuments];

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updatedGuide = await prisma.guide.update({
      where: { id: guideId },
      data: { documents: JSON.stringify(allDocuments) }
    });

    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –≥–∏–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', guideId, newDocuments.length);

    res.json({
      success: true,
      data: {
        documents: allDocuments,
        newDocuments,
        guide: updatedGuide
      },
      message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${newDocuments.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ' + (error instanceof Error ? error.message : 'Unknown error')
    });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≥–∏–¥–∞
export const deleteGuideDocument = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { documentPath } = req.body;
    const guideId = parseInt(id);

    if (!guideId || !documentPath) {
      res.status(400).json({ 
        success: false, 
        message: 'ID –≥–∏–¥–∞ –∏ –ø—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const existingGuide = await prisma.guide.findUnique({
      where: { id: guideId }
    });

    if (!existingGuide) {
      res.status(404).json({ 
        success: false, 
        message: '–ì–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
      return;
    }

    let documents = [];
    if (existingGuide.documents) {
      try {
        documents = JSON.parse(existingGuide.documents);
      } catch (e) {
        console.warn('Error parsing documents:', e);
      }
    }

    // –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    const updatedDocuments = documents.filter((doc: any) => doc.path !== documentPath);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updatedGuide = await prisma.guide.update({
      where: { id: guideId },
      data: { documents: JSON.stringify(updatedDocuments) }
    });

    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
    try {
      const fullPath = path.join(process.cwd(), documentPath);
      await fs.unlink(fullPath);
      console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω —Å –¥–∏—Å–∫–∞:', fullPath);
    } catch (fileError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞:', fileError);
    }

    res.json({
      success: true,
      data: {
        documents: updatedDocuments,
        guide: updatedGuide
      },
      message: '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + (error instanceof Error ? error.message : 'Unknown error')
    });
  }
};