import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import nodemailer from 'nodemailer';

const prisma = new PrismaClient();
const JWT_SECRET = process.env.JWT_SECRET || 'tour-guide-secret-key';

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç—É—Ä–≥–∏–¥–∞
export const loginTourGuide = async (req: Request, res: Response): Promise<void> => {
  try {
    const { login, password } = req.body;

    if (!login || !password) {
      res.status(400).json({ 
        success: false, 
        message: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
      return;
    }

    // –ù–∞–π—Ç–∏ —Ç—É—Ä–≥–∏–¥–∞ –ø–æ –ª–æ–≥–∏–Ω—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É guide)
    const guide = await prisma.guide.findFirst({
      where: { login },
      select: {
        id: true,
        name: true,
        login: true,
        password: true,
        contact: true,
        isActive: true
      }
    });

    if (!guide) {
      res.status(401).json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
      return;
    }

    if (!guide.isActive) {
      res.status(403).json({ 
        success: false, 
        message: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' 
      });
      return;
    }

    // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    let validPassword = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ null
    if (!guide.password) {
      res.status(401).json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
      return;
    }
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (–Ω–æ–≤—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±)
      validPassword = await bcrypt.compare(password, guide.password);
    } catch (error) {
      // –ï—Å–ª–∏ bcrypt.compare –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–∞—Ä—ã–π –Ω–µ—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
      // –í–†–ï–ú–ï–ù–ù–ê–Ø –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–∏–¥–æ–≤ (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è)
      console.warn('‚ö†Ô∏è Legacy password check for guide:', guide.login);
      validPassword = password === guide.password;
      
      // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–ª –∏ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–±–Ω–æ–≤–∏–º –µ–≥–æ –Ω–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
      if (validPassword) {
        try {
          const hashedPassword = await bcrypt.hash(password, 10);
          await prisma.guide.update({
            where: { id: guide.id },
            data: { password: hashedPassword }
          });
          console.log('‚úÖ Password migrated to hash for guide:', guide.login);
        } catch (updateError) {
          console.error('‚ùå Failed to migrate password to hash:', updateError);
        }
      }
    }
    
    if (!validPassword) {
      res.status(401).json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
      return;
    }

    // –°–æ–∑–¥–∞—Ç—å JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { 
        id: guide.id, 
        login: guide.login, 
        name: guide.name,
        type: 'tour-guide'
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    console.log('üîë Tour guide login successful:', guide.login);

    res.json({
      success: true,
      token,
      guide: {
        id: guide.id,
        name: guide.name,
        login: guide.login,
        email: guide.contact ? (typeof guide.contact === 'string' ? JSON.parse(guide.contact).email : (guide.contact as any).email) : null,
        phone: guide.contact ? (typeof guide.contact === 'string' ? JSON.parse(guide.contact).phone : (guide.contact as any).phone) : null
      },
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
    });

  } catch (error) {
    console.error('‚ùå Tour guide login error:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤ –¥–ª—è —Ç—É—Ä–≥–∏–¥–∞
export const getGuideTours = async (req: Request, res: Response): Promise<void> => {
  try {
    const guideId = (req as any).user?.id;

    if (!guideId) {
      res.status(401).json({ 
        success: false, 
        message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' 
      });
      return;
    }

    const tours = await prisma.tour.findMany({
      where: { 
        isActive: true,
        tourGuides: {
          some: {
            guideId: guideId
          }
        }
      },
      include: {
        bookings: {
          where: { status: { in: ['paid', 'confirmed'] } }
        },
        category: true,
        tourBlock: true
      },
      orderBy: {
        scheduledStartDate: 'asc'
      }
    });

    // –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–∏—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–∞
    const toursWithStats = tours.map(tour => {
      const totalTourists = tour.bookings.reduce((sum, booking) => {
        return sum + booking.numberOfTourists;
      }, 0);

      return {
        id: tour.id,
        uniqueCode: tour.uniqueCode,
        title: tour.title,
        scheduledStartDate: tour.scheduledStartDate,
        scheduledEndDate: tour.scheduledEndDate,
        status: tour.status,
        totalTourists,
        bookingsCount: tour.bookings.length,
        category: tour.category,
        tourBlock: tour.tourBlock
      };
    });

    console.log(`üìã Found ${tours.length} tours for guide ${guideId}`);

    res.json({
      success: true,
      data: toursWithStats
    });

  } catch (error) {
    console.error('‚ùå Error getting guide tours:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—É—Ä–∞ –¥–ª—è —Ç—É—Ä–≥–∏–¥–∞
export const getTourDetails = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const guideId = (req as any).user?.id;
    const tourId = parseInt(id);

    if (!tourId) {
      res.status(400).json({ 
        success: false, 
        message: 'ID —Ç—É—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
      return;
    }

    const tour = await prisma.tour.findFirst({
      where: { 
        id: tourId,
        assignedGuideId: guideId
      },
      include: {
        bookings: {
          where: { status: { in: ['paid', 'confirmed'] } },
          include: {
            tour: true,
            hotel: true
          }
        },
        category: true,
        tourBlock: true,
        reviews: {
          where: { isApproved: true }
        },
        guideReviews: {
          where: { guideId: guideId }
        }
      }
    });

    if (!tour) {
      res.status(404).json({ 
        success: false, 
        message: '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
      return;
    }

    // –ò–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–∏—Å—Ç–æ–≤ –∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    const tourists: any[] = [];
    tour.bookings.forEach(booking => {
      if (booking.tourists) {
        try {
          const bookingTourists = JSON.parse(booking.tourists);
          bookingTourists.forEach((tourist: any) => {
            tourists.push({
              ...tourist,
              bookingId: booking.id,
              contactEmail: booking.contactEmail,
              contactPhone: booking.contactPhone
            });
          });
        } catch (e) {
          console.warn('Error parsing tourists data:', e);
        }
      }
    });

    const tourDetails = {
      id: tour.id,
      uniqueCode: tour.uniqueCode,
      title: tour.title,
      description: tour.description,
      itinerary: tour.itinerary,
      scheduledStartDate: tour.scheduledStartDate,
      scheduledEndDate: tour.scheduledEndDate,
      status: tour.status,
      bookings: tour.bookings,
      tourists: tourists,
      totalTourists: tourists.length,
      category: tour.category,
      tourBlock: tour.tourBlock,
      reviews: tour.reviews,
      guideReview: tour.guideReviews[0] || null
    };

    res.json({
      success: true,
      data: tourDetails
    });

  } catch (error) {
    console.error('‚ùå Error getting tour details:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –ù–∞—á–∞—Ç—å —Ç—É—Ä
export const startTour = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const guideId = (req as any).user?.id;
    const tourId = parseInt(id);

    const tour = await prisma.tour.findFirst({
      where: { 
        id: tourId,
        assignedGuideId: guideId,
        status: 'pending'
      }
    });

    if (!tour) {
      res.status(404).json({ 
        success: false, 
        message: '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –Ω–∞—á–∞—Ç' 
      });
      return;
    }

    const updatedTour = await prisma.tour.update({
      where: { id: tourId },
      data: { 
        status: 'active' 
      }
    });

    console.log(`üöÄ Tour ${tourId} started by guide ${guideId}`);

    res.json({
      success: true,
      data: updatedTour,
      message: '–¢—É—Ä –Ω–∞—á–∞—Ç'
    });

  } catch (error) {
    console.error('‚ùå Error starting tour:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä
export const finishTour = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const guideId = (req as any).user?.id;
    const tourId = parseInt(id);

    const tour = await prisma.tour.findFirst({
      where: { 
        id: tourId,
        assignedGuideId: guideId,
        status: 'active'
      }
    });

    if (!tour) {
      res.status(404).json({ 
        success: false, 
        message: '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' 
      });
      return;
    }

    const updatedTour = await prisma.tour.update({
      where: { id: tourId },
      data: { 
        status: 'finished' 
      }
    });

    console.log(`‚úÖ Tour ${tourId} finished by guide ${guideId}`);

    res.json({
      success: true,
      data: updatedTour,
      message: '–¢—É—Ä –∑–∞–≤–µ—Ä—à—ë–Ω'
    });

  } catch (error) {
    console.error('‚ùå Error finishing tour:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –°–æ–±—Ä–∞—Ç—å –æ—Ç–∑—ã–≤—ã (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å email —Ç—É—Ä–∏—Å—Ç–∞–º)
export const collectReviews = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { selectedTourists } = req.body;
    const guideId = (req as any).user?.id;
    const tourId = parseInt(id);

    if (!selectedTourists || !Array.isArray(selectedTourists)) {
      res.status(400).json({ 
        success: false, 
        message: '–°–ø–∏—Å–æ–∫ —Ç—É—Ä–∏—Å—Ç–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
      return;
    }

    const tour = await prisma.tour.findFirst({
      where: { 
        id: tourId,
        assignedGuideId: guideId,
        status: 'finished'
      }
    });

    if (!tour) {
      res.status(404).json({ 
        success: false, 
        message: '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω' 
      });
      return;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ nodemailer (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    const transporter = nodemailer.createTransport({
      host: 'smtp.gmail.com',
      port: 587,
      secure: false,
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });

    let emailsSent = 0;

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å email –∫–∞–∂–¥–æ–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—É—Ä–∏—Å—Ç—É
    for (const tourist of selectedTourists) {
      if (tourist.email) {
        try {
          const reviewLink = `${process.env.FRONTEND_URL}/review/${tourId}?tourist=${encodeURIComponent(tourist.email)}`;
          
          await transporter.sendMail({
            from: process.env.EMAIL_FROM,
            to: tourist.email,
            subject: '–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ç—É—Ä–µ',
            html: `
              <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${tourist.name}!</h2>
              <p>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–µ "${JSON.parse(tour.title).ru}".</p>
              <p>–ú—ã –±—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ –≤—ã –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏:</p>
              <a href="${reviewLink}" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</a>
            `
          });
          
          emailsSent++;
        } catch (emailError) {
          console.warn('Failed to send email to:', tourist.email, emailError);
        }
      }
    }

    console.log(`üìß Sent ${emailsSent} review request emails for tour ${tourId}`);

    res.json({
      success: true,
      emailsSent,
      message: `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${emailsSent} –ø–∏—Å–µ–º —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤`
    });

  } catch (error) {
    console.error('‚ùå Error collecting reviews:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ç—É—Ä–≥–∏–¥–∞ –æ —Ç—É—Ä–µ
export const leaveGuideReview = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { content } = req.body;
    const guideId = (req as any).user?.id;
    const tourId = parseInt(id);

    if (!content || content.trim().length === 0) {
      res.status(400).json({ 
        success: false, 
        message: '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
      return;
    }

    const tour = await prisma.tour.findFirst({
      where: { 
        id: tourId,
        assignedGuideId: guideId,
        status: 'finished'
      }
    });

    if (!tour) {
      res.status(404).json({ 
        success: false, 
        message: '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω' 
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤ –æ—Ç —ç—Ç–æ–≥–æ —Ç—É—Ä–≥–∏–¥–∞
    const existingReview = await prisma.guideReview.findUnique({
      where: {
        tourId_guideId: {
          tourId: tourId,
          guideId: guideId
        }
      }
    });

    let review;
    if (existingReview) {
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
      review = await prisma.guideReview.update({
        where: { id: existingReview.id },
        data: { content: content.trim() }
      });
    } else {
      // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
      review = await prisma.guideReview.create({
        data: {
          tourId: tourId,
          guideId: guideId,
          content: content.trim()
        }
      });
    }

    console.log(`üí¨ Guide review ${existingReview ? 'updated' : 'created'} for tour ${tourId}`);

    res.json({
      success: true,
      data: review,
      message: '–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω'
    });

  } catch (error) {
    console.error('‚ùå Error leaving guide review:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–≥–∏–¥–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (–¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏)
export const createTourGuideProfile = async (req: Request, res: Response): Promise<void> => {
  try {
    const { name, description, login, password, email, phone, languages, experience, isActive } = req.body;

    console.log('üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–¥–∞:', req.body);

    if (!name || !email || !languages) {
      res.status(400).json({ 
        success: false, 
        message: '–ò–º—è, email –∏ —è–∑—ã–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
      return;
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ Guide –≤–º–µ—Å—Ç–æ TourGuideProfile
    const guide = await prisma.guide.create({
      data: {
        name: name, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ JSON
        description: description || '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥',
        languages: languages, // –°—Ç—Ä–æ–∫–∞ —è–∑—ã–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        contact: JSON.stringify({ email, phone }), // –ö–æ–Ω—Ç–∞–∫—Ç—ã –≤ JSON
        experience: experience ? parseInt(experience) : 0,
        rating: 5.0, // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        login: login, // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
        password: hashedPassword, // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û: –•—Ä–∞–Ω–∏–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        isActive: isActive !== undefined ? isActive : true,
        photo: null // –ü–æ–∫–∞ –±–µ–∑ —Ñ–æ—Ç–æ
      }
    });

    console.log('‚úÖ –ù–æ–≤—ã–π –≥–∏–¥ —Å–æ–∑–¥–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ Guide:', guide.id);

    res.status(201).json({
      success: true,
      data: {
        id: guide.id,
        name: guide.name,
        description: guide.description,
        languages: guide.languages,
        contact: guide.contact,
        experience: guide.experience,
        rating: guide.rating,
        isActive: guide.isActive
      },
      message: '–ì–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–¥–∞:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error instanceof Error ? error.message : 'Unknown error')
    });
  }
};