import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import multer from 'multer';
import path from 'path';

const prisma = new PrismaClient();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/tour-agents/');
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, 'agent-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|webp/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!'));
    }
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤
export const getAllTourAgents = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤...');

    const tourAgents = await prisma.tourAgent.findMany({
      include: {
        country: true,
        city: true,
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tourAgents.length} —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤`);

    res.json({
      success: true,
      data: tourAgents,
      count: tourAgents.length
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤ (–¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API)
export const getActiveTourAgents = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤...');

    const tourAgents = await prisma.tourAgent.findMany({
      where: {
        isActive: true
      },
      include: {
        country: true,
        city: true,
      },
      orderBy: {
        name: 'asc'
      }
    });

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tourAgents.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤`);

    res.json({
      success: true,
      data: tourAgents,
      count: tourAgents.length
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ ID
export const getTourAgentById = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞ —Å ID: ${id}`);

    const tourAgent = await prisma.tourAgent.findUnique({
      where: {
        id: parseInt(id)
      },
      include: {
        country: true,
        city: true,
      }
    });

    if (!tourAgent) {
      res.status(404).json({
        success: false,
        message: '–¢—É—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
      return;
    }

    console.log(`‚úÖ –¢—É—Ä–∞–≥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: ${tourAgent.name}`);

    res.json({
      success: true,
      data: tourAgent
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞
export const createTourAgent = async (req: Request, res: Response): Promise<void> => {
  try {
    const {
      name,
      organization,
      website,
      stateRegistration,
      description,
      contactName,
      contactPhone,
      contactEmail,
      address,
      countryId,
      cityId,
      isActive
    } = req.body;

    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞:', { name, organization });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    const files = req.files as { [fieldname: string]: Express.Multer.File[] };
    let photoPath = null;
    if (files && files.photo && files.photo[0]) {
      photoPath = files.photo[0].path.replace(/\\/g, '/');
      console.log('üì∑ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', photoPath);
    }

    const tourAgentData: any = {
      name: name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      organization,
      website: website || null,
      stateRegistration: stateRegistration || null,
      description: description || null,
      contactName: contactName || null,
      contactPhone: contactPhone || null,
      contactEmail: contactEmail || null,
      address: address || null,
      photo: photoPath,
      countryId: countryId ? parseInt(countryId) : null,
      cityId: cityId ? parseInt(cityId) : null,
      isActive: isActive !== undefined ? isActive === 'true' : true
    };

    const newTourAgent = await prisma.tourAgent.create({
      data: tourAgentData,
      include: {
        country: true,
        city: true,
      }
    });

    console.log('‚úÖ –¢—É—Ä–∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', newTourAgent.id);

    res.status(201).json({
      success: true,
      message: '–¢—É—Ä–∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      data: newTourAgent
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞
export const updateTourAgent = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const {
      name,
      organization,
      website,
      stateRegistration,
      description,
      contactName,
      contactPhone,
      contactEmail,
      address,
      countryId,
      cityId,
      isActive
    } = req.body;

    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞ ID: ${id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞
    const existingTourAgent = await prisma.tourAgent.findUnique({
      where: { id: parseInt(id) }
    });

    if (!existingTourAgent) {
      res.status(404).json({
        success: false,
        message: '–¢—É—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    const files = req.files as { [fieldname: string]: Express.Multer.File[] };
    let photoPath = existingTourAgent.photo; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (files && files.photo && files.photo[0]) {
      photoPath = files.photo[0].path.replace(/\\/g, '/');
      console.log('üì∑ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', photoPath);
    }

    const updateData: any = {
      name: name || existingTourAgent.name,
      organization: organization || existingTourAgent.organization,
      website: website || existingTourAgent.website,
      stateRegistration: stateRegistration || existingTourAgent.stateRegistration,
      description: description || existingTourAgent.description,
      contactName: contactName || existingTourAgent.contactName,
      contactPhone: contactPhone || existingTourAgent.contactPhone,
      contactEmail: contactEmail || existingTourAgent.contactEmail,
      address: address || existingTourAgent.address,
      photo: photoPath,
      countryId: countryId ? parseInt(countryId) : existingTourAgent.countryId,
      cityId: cityId ? parseInt(cityId) : existingTourAgent.cityId,
      isActive: isActive !== undefined ? isActive === 'true' : existingTourAgent.isActive
    };

    const updatedTourAgent = await prisma.tourAgent.update({
      where: { id: parseInt(id) },
      data: updateData,
      include: {
        country: true,
        city: true,
      }
    });

    console.log('‚úÖ –¢—É—Ä–∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω:', updatedTourAgent.id);

    res.json({
      success: true,
      message: '–¢—É—Ä–∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω',
      data: updatedTourAgent
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

// –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞
export const deleteTourAgent = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞ ID: ${id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞
    const existingTourAgent = await prisma.tourAgent.findUnique({
      where: { id: parseInt(id) }
    });

    if (!existingTourAgent) {
      res.status(404).json({
        success: false,
        message: '–¢—É—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
      return;
    }

    await prisma.tourAgent.delete({
      where: { id: parseInt(id) }
    });

    console.log('‚úÖ –¢—É—Ä–∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω:', id);

    res.json({
      success: true,
      message: '–¢—É—Ä–∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞
export const toggleTourAgentStatus = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞ ID: ${id}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    const currentTourAgent = await prisma.tourAgent.findUnique({
      where: { id: parseInt(id) }
    });

    if (!currentTourAgent) {
      res.status(404).json({
        success: false,
        message: '–¢—É—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
      return;
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    const updatedTourAgent = await prisma.tourAgent.update({
      where: { id: parseInt(id) },
      data: { isActive: !currentTourAgent.isActive }
    });

    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: ${updatedTourAgent.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);

    res.json({
      success: true,
      message: `–¢—É—Ä–∞–≥–µ–Ω—Ç ${updatedTourAgent.isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}`,
      data: updatedTourAgent
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç multer middleware –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ routes
export const uploadTourAgentPhoto = upload.fields([{ name: 'photo', maxCount: 1 }]);