import { Request, Response } from 'express';
import prisma from '../config/database';
import { emailService } from '../services/emailService';
import crypto from 'crypto';
import fetch from 'node-fetch';

export const paylerController = {
  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Payler StartSession API
   * POST /api/payments/payler/create
   */
  async createPayment(req: Request, res: Response) {
    try {
      const { orderNumber } = req.body;

      if (!orderNumber) {
        return res.status(400).json({
          success: false,
          message: 'Order number is required',
        });
      }

      // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
      const order = await prisma.order.findUnique({
        where: { orderNumber },
        include: {
          customer: true,
          tour: true,
        },
      });

      if (!order) {
        return res.status(404).json({
          success: false,
          message: 'Order not found',
        });
      }

      const paylerKey = process.env.PAYLER_KEY;
      const baseUrl = process.env.BASE_URL || 'http://localhost:3000';

      if (!paylerKey) {
        return res.status(500).json({
          success: false,
          message: 'Payler configuration missing (PAYLER_KEY)',
        });
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∏ (—É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 100)
      const amount = Math.round(order.totalAmount * 100);
      const orderId = order.id.toString();

      // URLs –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
      const returnUrl = `${baseUrl}/payment-success?orderNumber=${orderNumber}`;
      const failUrl = `${baseUrl}/payment-fail?orderNumber=${orderNumber}`;

      console.log(`üîÑ Creating Payler payment: Order ${orderId}, Amount ${amount} –∫–æ–ø–µ–µ–∫`);

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è StartSession API (–∫–∞–∫ –≤ PHP-–≤–µ—Ä—Å–∏–∏)
      const fields = {
        key: paylerKey, // –∫–ª—é—á –±–µ—Ä—ë–º —Ç–µ–ø–µ—Ä—å –∏–∑ .env
        type: 'OneStep',
        currency: 'TJS',
        lang: 'en',
        amount: amount.toString(),
        order_id: orderId,
        return_url: returnUrl,
        fail_url: failUrl
      };

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–æ–µ–≤–æ–º—É Payler StartSession API (—É–±—Ä–∞–ª–∏ sandbox)
      const response = await fetch('https://secure.payler.com/gapi/StartSession', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams(fields),
      });

      if (!response.ok) {
        console.error('‚ùå Payler StartSession failed:', response.statusText);
        return res.status(500).json({
          success: false,
          message: 'Failed to communicate with Payler API',
        });
      }

      const responseText = await response.text();
      console.log('üîÑ Payler StartSession response:', responseText);

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
      let responseData;
      try {
        responseData = JSON.parse(responseText);
      } catch {
        // –ï—Å–ª–∏ –Ω–µ JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å session_id –∏–∑ —Å—Ç—Ä–æ–∫–∏
        const sessionIdMatch = responseText.match(/session_id=([^&\s]+)/);
        if (sessionIdMatch) {
          responseData = { session_id: sessionIdMatch[1] };
        } else {
          throw new Error('Invalid response format');
        }
      }

      if (!responseData.session_id) {
        console.error('‚ùå No session_id in Payler response:', responseData);
        return res.status(500).json({
          success: false,
          message: 'Failed to create Payler session',
          error: responseData.error?.message || 'Unknown error',
        });
      }

      const sessionId = responseData.session_id;

      // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –ë–î
      await prisma.order.update({
        where: { id: order.id },
        data: {
          paymentMethod: 'payler',
          paymentStatus: 'processing',
          paymentIntentId: sessionId,
        },
      });

      console.log(`‚úÖ Payler session created: ${sessionId}`);

      // –í–µ—Ä–Ω—É—Ç—å URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
      const redirectUrl = `https://secure.payler.com/gapi/Pay/?session_id=${sessionId}`;

      return res.json({
        success: true,
        redirectUrl,
        sessionId,
      });

    } catch (error) {
      console.error('‚ùå Payler createPayment error:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to create Payler payment',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç Payler —Å HMAC –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   * POST /api/payments/payler/callback
   */
  async callback(req: Request, res: Response) {
    try {
      const { orderId, status } = req.body;
      const signature = req.headers['x-payler-signature'] as string;
      
      console.log('üîÑ Payler callback received:', { orderId, status, signature: signature ? 'present' : 'missing' });

      if (!orderId || !status) {
        console.error('‚ùå Missing required fields in Payler callback');
        return res.status(400).json({
          success: false,
          message: 'Missing orderId or status'
        });
      }

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è HMAC –ø–æ–¥–ø–∏—Å–∏
      const paylerKey = process.env.PAYLER_KEY;
      
      if (!paylerKey) {
        console.error('‚ùå Payler configuration missing for callback validation');
        return res.status(500).json({
          success: false,
          message: 'Payment configuration error'
        });
      }

      if (!signature) {
        console.error('‚ùå Missing signature in Payler callback');
        return res.status(403).json({
          success: false,
          message: 'Invalid signature'
        });
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è HMAC (orderId + status)
      const message = `${orderId}${status}`;
      const expected = crypto
        .createHmac('sha256', paylerKey)
        .update(message)
        .digest('hex');

      if (signature !== expected) {
        console.error('‚ùå Invalid HMAC signature in Payler callback:', {
          received: signature,
          expected: expected,
          message: message
        });
        return res.status(403).json({
          success: false,
          message: 'Invalid signature'
        });
      }

      console.log('‚úÖ Payler callback signature validated successfully');

      // –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑
      const order = await prisma.order.findUnique({
        where: { id: Number(orderId) },
        include: {
          customer: true,
          tour: true,
        },
      });

      if (!order) {
        console.error('‚ùå Order not found for Payler callback:', orderId);
        return res.status(404).json({
          success: false,
          message: 'Order not found'
        });
      }

      // ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      if (status === 'Charged') {
        await prisma.order.update({
          where: { id: Number(orderId) },
          data: {
            paymentStatus: 'paid',
          },
        });

        console.log('‚úÖ Payment confirmed for order:', orderId);

        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        try {
          await emailService.sendPaymentConfirmation(order, order.customer);
          console.log('‚úÖ Confirmation email sent for order:', orderId);
        } catch (emailError) {
          console.error('‚ùå Email sending failed:', emailError);
        }
      } else {
        await prisma.order.update({
          where: { id: Number(orderId) },
          data: {
            paymentStatus: 'failed',
          },
        });
        console.log('‚ö†Ô∏è Payment failed for order:', orderId, 'with status:', status);
      }

      return res.json({ success: true });

    } catch (error) {
      console.error('‚ùå Payler callback error:', error);
      return res.status(500).json({
        success: false,
        message: 'Server error'
      });
    }
  }
};