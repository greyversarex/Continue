import { Request, Response } from 'express';
import prisma from '../config/database';
import { emailService } from '../services/emailService';
import crypto from 'crypto';

export const paylerController = {
  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Payler StartSession API
   * POST /api/payments/payler/create
   */
  async createPayment(req: Request, res: Response) {
    try {
      const { orderNumber } = req.body;

      if (!orderNumber) {
        return res.status(400).json({
          success: false,
          message: 'Order number is required',
        });
      }

      // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
      const order = await prisma.order.findUnique({
        where: { orderNumber },
        include: {
          customer: true,
          tour: true,
        },
      });

      if (!order) {
        return res.status(404).json({
          success: false,
          message: 'Order not found',
        });
      }

      const paylerKey = process.env.PAYLER_KEY;
      const baseUrl = process.env.BASE_URL || 'http://localhost:3000';

      if (!paylerKey) {
        return res.status(500).json({
          success: false,
          message: 'Payler configuration missing (PAYLER_KEY)',
        });
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∏ (—É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 100)
      const amount = Math.round(order.totalAmount * 100);
      const orderId = order.id.toString();

      // URLs –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
      const returnUrl = `${baseUrl}/payment-success?orderNumber=${orderNumber}`;
      const failUrl = `${baseUrl}/payment-fail?orderNumber=${orderNumber}`;

      console.log(`üîÑ Creating Payler payment: Order ${orderId}, Amount ${amount} –∫–æ–ø–µ–µ–∫`);

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è StartSession API
      const fields = {
        key: paylerKey,
        type: 'OneStep',
        currency: 'TJS', // –ò—Å–ø–æ–ª—å–∑—É–µ–º TJS –¥–ª—è –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º PHP)
        lang: 'en',
        amount: amount.toString(),
        order_id: orderId,
        // –î–æ–±–∞–≤–ª—è–µ–º URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        return_url: returnUrl,
        fail_url: failUrl,
      };

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Payler StartSession API
      const fetch = require('node-fetch');
      const response = await fetch('https://secure.payler.com/gapi/StartSession', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams(fields),
      });

      if (!response.ok) {
        console.error('‚ùå Payler StartSession failed:', response.statusText);
        return res.status(500).json({
          success: false,
          message: 'Failed to communicate with Payler API',
        });
      }

      const responseText = await response.text();
      console.log('üîÑ Payler StartSession response:', responseText);

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
      let responseData;
      try {
        responseData = JSON.parse(responseText);
      } catch {
        // –ï—Å–ª–∏ –Ω–µ JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å session_id –∏–∑ —Å—Ç—Ä–æ–∫–∏
        const sessionIdMatch = responseText.match(/session_id=([^&\s]+)/);
        if (sessionIdMatch) {
          responseData = { session_id: sessionIdMatch[1] };
        } else {
          throw new Error('Invalid response format');
        }
      }

      if (!responseData.session_id) {
        console.error('‚ùå No session_id in Payler response:', responseData);
        return res.status(500).json({
          success: false,
          message: 'Failed to create Payler session',
          error: responseData.error?.message || 'Unknown error',
        });
      }

      const sessionId = responseData.session_id;

      // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –ë–î
      await prisma.order.update({
        where: { id: order.id },
        data: {
          paymentMethod: 'payler',
          paymentStatus: 'processing',
          paymentIntentId: sessionId,
        },
      });

      console.log(`‚úÖ Payler session created: ${sessionId}`);

      // –í–µ—Ä–Ω—É—Ç—å URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
      const redirectUrl = `https://secure.payler.com/gapi/Pay/?session_id=${sessionId}`;

      return res.json({
        success: true,
        redirectUrl,
        sessionId,
      });

    } catch (error) {
      console.error('‚ùå Payler createPayment error:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to create Payler payment',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç Payler —Å HMAC –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   * POST /api/payments/payler/callback
   */
  async callback(req: Request, res: Response) {
    try {
      const { order_id, status, session_id, amount } = req.body;
      
      console.log('üîÑ Payler callback received:', { order_id, status, session_id, amount });

      if (!order_id) {
        console.error('‚ùå Missing order_id in Payler callback');
        return res.status(400).send('Bad Request - Missing order_id');
      }

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è HMAC –ø–æ–¥–ø–∏—Å–∏
      const paylerKey = process.env.PAYLER_KEY;
      
      if (!paylerKey) {
        console.error('‚ùå Payler configuration missing for callback validation');
        return res.status(500).json({
          success: false,
          message: 'Payment configuration error'
        });
      }

      // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É HMAC –ø–æ–¥–ø–∏—Å–∏ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ—Ç Payler
      // –ü–æ–∫–∞ —á—Ç–æ Payler –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —á–µ—Ç–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ HMAC –≤–∞–ª–∏–¥–∞—Ü–∏–∏ callbacks
      // –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç AlifPay, –≥–¥–µ –µ—Å—Ç—å —á–µ—Ç–∫–∞—è —Å—Ö–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
      
      console.log('‚ö†Ô∏è HMAC validation for Payler not implemented - waiting for official documentation');

      // –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑
      const order = await prisma.order.findUnique({
        where: { id: parseInt(order_id) },
        include: {
          customer: true,
          tour: true,
        },
      });

      if (!order) {
        console.error('‚ùå Order not found for Payler callback:', order_id);
        return res.status(404).send('Order Not Found');
      }

      // ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      if (status === 'Charged' || status === 'success') {
        await prisma.order.update({
          where: { id: order.id },
          data: {
            paymentStatus: 'paid',
          },
        });

        console.log('‚úÖ Payment confirmed for order:', order_id);

        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        try {
          await emailService.sendPaymentConfirmation(order, order.customer);
          console.log('‚úÖ Confirmation email sent for order:', order_id);
        } catch (emailError) {
          console.error('‚ùå Email sending failed:', emailError);
        }
      } else {
        await prisma.order.update({
          where: { id: order.id },
          data: {
            paymentStatus: 'failed',
          },
        });
        console.log('‚ö†Ô∏è Payment failed for order:', order_id);
      }

      return res.status(200).send('OK');

    } catch (error) {
      console.error('‚ùå Payler callback error:', error);
      return res.status(500).send('Internal Server Error');
    }
  }
};