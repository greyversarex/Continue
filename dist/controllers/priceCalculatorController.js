"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateTourPrice = exports.initializeDefaults = exports.deleteComponent = exports.updateComponent = exports.createComponent = exports.getComponentByKey = exports.getComponentById = exports.getAllComponents = void 0;
const models_1 = require("../models");
const getAllComponents = async (req, res) => {
    try {
        const components = await models_1.PriceCalculatorModel.findAll();
        res.json({
            success: true,
            data: components
        });
    }
    catch (error) {
        console.error('Error fetching pricing components:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ü–µ–Ω'
        });
    }
};
exports.getAllComponents = getAllComponents;
const getComponentById = async (req, res) => {
    try {
        const { id } = req.params;
        const allComponents = await models_1.PriceCalculatorModel.findAll();
        const component = allComponents.find(c => c.id === parseInt(id));
        if (!component) {
            res.status(404).json({
                success: false,
                message: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
            return;
        }
        res.json({
            success: true,
            data: component
        });
    }
    catch (error) {
        console.error('Error fetching pricing component by ID:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞'
        });
    }
};
exports.getComponentById = getComponentById;
const getComponentByKey = async (req, res) => {
    try {
        const { key } = req.params;
        const component = await models_1.PriceCalculatorModel.findByKey(key);
        if (!component) {
            res.status(404).json({
                success: false,
                message: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
            return;
        }
        res.json({
            success: true,
            data: component
        });
    }
    catch (error) {
        console.error('Error fetching pricing component by key:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞'
        });
    }
};
exports.getComponentByKey = getComponentByKey;
const createComponent = async (req, res) => {
    try {
        const { key, category, name, price, unit, description, sortOrder } = req.body;
        if (!key || !category || !name || price === undefined || !unit) {
            res.status(400).json({
                success: false,
                message: '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
            });
            return;
        }
        const component = await models_1.PriceCalculatorModel.create({
            key,
            category,
            name,
            price: parseFloat(price),
            unit,
            description,
            sortOrder: sortOrder || 0
        });
        res.status(201).json({
            success: true,
            data: component,
            message: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
        });
    }
    catch (error) {
        console.error('Error creating pricing component:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞'
        });
    }
};
exports.createComponent = createComponent;
const updateComponent = async (req, res) => {
    const { id } = req.params;
    const { name, price, unit, description, sortOrder, isActive } = req.body;
    console.log(`üîÑ Attempting to update component ${id} with price ${price}`);
    let retryCount = 0;
    const maxRetries = 3;
    while (retryCount <= maxRetries) {
        try {
            const component = await models_1.PriceCalculatorModel.update(parseInt(id), {
                name,
                price: price !== undefined ? parseFloat(price) : undefined,
                unit,
                description,
                sortOrder,
                isActive
            });
            console.log(`‚úÖ Component ${id} updated successfully on attempt ${retryCount + 1}`);
            res.json({
                success: true,
                data: component,
                message: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
            });
            return;
        }
        catch (error) {
            retryCount++;
            console.error(`‚ùå Attempt ${retryCount} failed for component ${id}:`, error.message);
            const isDbError = error.message?.includes('connection') ||
                error.message?.includes('terminating') ||
                error.code === 'P1001' || error.code === 'P1017';
            if (isDbError && retryCount <= maxRetries) {
                console.log(`üîÑ Retrying in ${retryCount * 1000}ms... (attempt ${retryCount}/${maxRetries})`);
                await new Promise(resolve => setTimeout(resolve, retryCount * 1000));
                continue;
            }
            console.error('‚ùå All retry attempts failed or non-retryable error');
            res.status(500).json({
                success: false,
                message: retryCount > maxRetries ?
                    `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±–æ–≤–∞–Ω–æ ${maxRetries} —Ä–∞–∑.` :
                    '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞'
            });
            return;
        }
    }
};
exports.updateComponent = updateComponent;
const deleteComponent = async (req, res) => {
    try {
        const { id } = req.params;
        await models_1.PriceCalculatorModel.delete(parseInt(id));
        res.json({
            success: true,
            message: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        });
    }
    catch (error) {
        console.error('Error deleting pricing component:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞'
        });
    }
};
exports.deleteComponent = deleteComponent;
const initializeDefaults = async (req, res) => {
    try {
        const components = await models_1.PriceCalculatorModel.initializeDefaults();
        res.json({
            success: true,
            data: components,
            message: `–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${components.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`
        });
    }
    catch (error) {
        console.error('Error initializing default components:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
        });
    }
};
exports.initializeDefaults = initializeDefaults;
const calculateTourPrice = async (req, res) => {
    try {
        const { components } = req.body;
        if (!components || !Array.isArray(components)) {
            res.status(400).json({
                success: false,
                message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤'
            });
            return;
        }
        let totalPrice = 0;
        const calculation = [];
        for (const comp of components) {
            const component = await models_1.PriceCalculatorModel.findByKey(comp.key);
            if (component) {
                const componentTotal = component.price * (comp.quantity || 1);
                totalPrice += componentTotal;
                calculation.push({
                    component: component.name,
                    price: component.price,
                    quantity: comp.quantity || 1,
                    unit: component.unit,
                    total: componentTotal
                });
            }
        }
        res.json({
            success: true,
            data: {
                totalPrice: Math.round(totalPrice * 100) / 100,
                currency: 'TJS',
                calculation
            }
        });
    }
    catch (error) {
        console.error('Error calculating tour price:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—É—Ä–∞'
        });
    }
};
exports.calculateTourPrice = calculateTourPrice;
//# sourceMappingURL=priceCalculatorController.js.map