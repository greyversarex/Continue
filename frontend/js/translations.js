// –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü
class TranslationSystem {
    constructor() {
        this.currentLanguage = 'ru';
        this.translations = {};
        this.supportedLanguages = ['ru', 'en', 'tj', 'fa', 'de', 'zh'];
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ localStorage
        const savedLanguage = localStorage.getItem('selectedLanguage');
        if (savedLanguage && this.supportedLanguages.includes(savedLanguage)) {
            this.currentLanguage = savedLanguage;
        }
        
        this.init();
    }
    
    async init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
        await this.loadTranslations(this.currentLanguage);
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        this.applyTranslations();
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —è–∑—ã–∫–æ–≤–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        this.updateLanguageSelector();
    }
    
    async loadTranslations(language) {
        try {
            const response = await fetch(`/translations/${language}.json`);
            if (!response.ok) {
                throw new Error(`Failed to load translations for ${language}`);
            }
            this.translations[language] = await response.json();
            console.log(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è ${language} –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è ${language}:`, error);
            // Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π —è–∑—ã–∫ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
            if (language !== 'ru') {
                await this.loadTranslations('ru');
            }
        }
    }
    
    async changeLanguage(language) {
        if (!this.supportedLanguages.includes(language)) {
            console.error(`–Ø–∑—ã–∫ ${language} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
            return;
        }
        
        this.currentLanguage = language;
        localStorage.setItem('selectedLanguage', language);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        if (!this.translations[language]) {
            await this.loadTranslations(language);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        this.applyTranslations();
        this.updateLanguageSelector();
        
        console.log(`üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${language}`);
    }
    
    translate(key, fallback = '') {
        const keys = key.split('.');
        let translation = this.translations[this.currentLanguage];
        
        for (const k of keys) {
            if (translation && translation[k]) {
                translation = translation[k];
            } else {
                // Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                translation = this.translations['ru'];
                for (const k of keys) {
                    if (translation && translation[k]) {
                        translation = translation[k];
                    } else {
                        return fallback || key;
                    }
                }
                break;
            }
        }
        
        return typeof translation === 'string' ? translation : fallback || key;
    }
    
    applyTranslations() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-translate
        const elements = document.querySelectorAll('[data-translate]');
        
        elements.forEach(element => {
            const key = element.getAttribute('data-translate');
            const translation = this.translate(key);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∫ –Ω—É–∂–Ω–æ–º—É –∞—Ç—Ä–∏–±—É—Ç—É
            const attribute = element.getAttribute('data-translate-attr') || 'textContent';
            
            if (attribute === 'placeholder') {
                element.placeholder = translation;
            } else if (attribute === 'title') {
                element.title = translation;
            } else {
                element.textContent = translation;
            }
        });
        
        console.log(`üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞: ${this.currentLanguage}`);
    }
    
    updateLanguageSelector() {
        const languageData = {
            'ru': { flag: 'flag-ru', name: '–†—É—Å—Å–∫–∏–π' },
            'en': { flag: 'flag-us', name: 'English' },
            'tj': { flag: 'flag-tj', name: '–¢–æ“∑–∏–∫”£' },
            'fa': { flag: 'flag-ir', name: 'ŸÅÿßÿ±ÿ≥€å' },
            'de': { flag: 'flag-de', name: 'Deutsch' },
            'zh': { flag: 'flag-cn', name: '‰∏≠Êñá' }
        };
        
        const currentLang = languageData[this.currentLanguage];
        if (!currentLang) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        const selectedFlag = document.querySelector('.selected-flag');
        const selectedLang = document.querySelector('.selected-lang');
        
        if (selectedFlag) {
            selectedFlag.className = `selected-flag ${currentLang.flag}`;
        }
        if (selectedLang) {
            selectedLang.textContent = currentLang.name;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ dropdown
        document.querySelectorAll('#langDropdown .lang-option').forEach(opt => {
            opt.classList.remove('active');
            if (opt.getAttribute('data-lang') === this.currentLanguage) {
                opt.classList.add('active');
            }
        });
    }
    
    getLanguageInfo() {
        return {
            current: this.currentLanguage,
            supported: this.supportedLanguages,
            hasTranslations: Object.keys(this.translations)
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
let translationSystem;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    translationSystem = new TranslationSystem();
    // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.translationSystem = translationSystem;
});

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è selectLanguage –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
async function selectLanguage(lang, flagClass, name) {
    console.log(`üåê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞: ${lang}`);
    
    if (translationSystem) {
        await translationSystem.changeLanguage(lang);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
    const dropdown = document.getElementById('langDropdown');
    if (dropdown) {
        dropdown.classList.remove('show');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É
    const arrow = document.querySelector('.dropdown-arrow');
    if (arrow) {
        arrow.classList.remove('open');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ JavaScript
function t(key, fallback = '') {
    return translationSystem ? translationSystem.translate(key, fallback) : fallback;
}