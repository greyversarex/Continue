/**
 * Universal Layout Loader –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–µ–¥–µ—Ä–∞ –∏ —Ñ—É—Ç–µ—Ä–∞
 * Asynchronously loads _header.html and _footer.html into all pages
 * Standardized version with idempotence guard and layout:ready event
 */

class LayoutLoader {
    constructor() {
        // Global idempotence guard
        if (window.layoutInitialized) {
            console.warn('‚ö†Ô∏è LayoutLoader already initialized, skipping...');
            return;
        }
        
        this.headerLoaded = false;
        this.footerLoaded = false;
        this.API_BASE = window.location.origin;
        this.init();
    }

    async init() {
        try {
            await Promise.all([
                this.loadHeader(),
                this.loadFooter()
            ]);
            
            // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
            this.initializeAfterLoad();
        } catch (error) {
            console.error('‚ùå Layout loading failed:', error);
        }
    }

    async loadHeader() {
        try {
            const response = await fetch('/_header.html');
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const headerHTML = await response.text();
            
            // üéØ –£–ú–ù–ê–Ø –í–°–¢–ê–í–ö–ê: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –Ω–∞—á–∞–ª–æ body
            const headerContainer = document.getElementById('header-container');
            if (headerContainer) {
                headerContainer.innerHTML = headerHTML;
            } else {
                const tempContainer = document.createElement('div');
                tempContainer.innerHTML = headerHTML;
                document.body.insertBefore(tempContainer.firstElementChild, document.body.firstChild);
            }
            
            this.headerLoaded = true;
            console.log('‚úÖ Header loaded successfully');
        } catch (error) {
            console.error('‚ùå Failed to load header:', error);
        }
    }

    async loadFooter() {
        try {
            const response = await fetch('/_footer.html');
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const footerHTML = await response.text();
            
            // üéØ –£–ú–ù–ê–Ø –í–°–¢–ê–í–ö–ê: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∫–æ–Ω–µ—Ü body
            const footerContainer = document.getElementById('footer-container');
            if (footerContainer) {
                footerContainer.innerHTML = footerHTML;
            } else {
                const tempContainer = document.createElement('div');
                tempContainer.innerHTML = footerHTML;
                document.body.appendChild(tempContainer.firstElementChild);
            }
            
            this.footerLoaded = true;
            console.log('‚úÖ Footer loaded successfully');
        } catch (error) {
            console.error('‚ùå Failed to load footer:', error);
        }
    }

    initializeAfterLoad() {
        try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.setDefaultLanguage();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ layout
            if (typeof window.initializeI18n === 'function') {
                window.initializeI18n();
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º dropdown —Ñ—É–Ω–∫—Ü–∏–∏
            this.initializeDropdowns();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —è–∑—ã–∫–æ–≤—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
            this.initializeLanguageSwitcher();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
            this.initializeCurrencySwitcher();
            
            // Feature-detected map initialization (only if container exists)
            this.initializeMapIfPresent();
            
            // Mark as fully initialized
            window.layoutInitialized = true;
            
            // Dispatch layout:ready event for page scripts
            const layoutReadyEvent = new CustomEvent('layout:ready', {
                detail: { 
                    headerLoaded: this.headerLoaded, 
                    footerLoaded: this.footerLoaded,
                    apiBase: this.API_BASE
                }
            });
            document.dispatchEvent(layoutReadyEvent);
            
            console.log('üéâ Layout initialization completed');
            
        } catch (error) {
            console.error('‚ùå Layout initialization failed:', error);
        }
    }

    initializeDropdowns() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é
        document.addEventListener('click', (e) => {
            const dropdowns = document.querySelectorAll('.dropdown-content');
            const langDropdowns = document.querySelectorAll('.lang-dropdown-content');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
            if (!e.target.closest('.dropdown') && !e.target.closest('.language-dropdown')) {
                dropdowns.forEach(dropdown => dropdown.style.display = 'none');
                langDropdowns.forEach(dropdown => dropdown.style.display = 'none');
            }
        });
    }

    initializeLanguageSwitcher() {
        // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
        window.toggleLanguageDropdown = () => {
            const dropdown = document.getElementById('langDropdown');
            if (dropdown) {
                dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
            }
        };

        window.switchSiteLanguage = (lang) => {
            if (typeof window.switchLanguage === 'function') {
                window.switchLanguage(lang);
            } else {
                // Fallback –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –±–µ–∑ i18n
                window.currentLanguage = lang;
                localStorage.setItem('selectedLanguage', lang);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                this.updateLanguageSelector(lang);
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
            const dropdown = document.getElementById('langDropdown');
            if (dropdown) dropdown.style.display = 'none';
        };
    }

    initializeCurrencySwitcher() {
        window.toggleCurrencyDropdown = () => {
            const dropdown = document.getElementById('currencyDropdown');
            if (dropdown) {
                dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
            }
        };

        window.selectCurrency = (currency, symbol) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
            const selectedCurrency = document.querySelector('.selected-currency');
            if (selectedCurrency) {
                selectedCurrency.textContent = currency;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem('selectedCurrency', currency);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
            const dropdown = document.getElementById('currencyDropdown');
            if (dropdown) dropdown.style.display = 'none';
            
            // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç—ã –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (typeof window.updateCurrency === 'function') {
                window.updateCurrency(currency);
            }
        };
    }

    updateLanguageSelector(lang) {
        const flags = {
            'en': 'üá∫üá∏',
            'ru': 'üá∑üá∫'
        };
        
        const names = {
            'en': 'English',
            'ru': '–†—É—Å—Å–∫–∏–π'
        };
        
        const selectedFlag = document.querySelector('.selected-flag');
        const selectedLang = document.querySelector('.selected-lang');
        
        if (selectedFlag) selectedFlag.textContent = flags[lang] || flags['en'];
        if (selectedLang) selectedLang.textContent = names[lang] || names['en'];
    }

    setDefaultLanguage() {
        // üéØ –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê: EN –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let savedLanguage = localStorage.getItem('selectedLanguage');
        
        // –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        if (!savedLanguage || !['en', 'ru'].includes(savedLanguage)) {
            savedLanguage = 'en';
            localStorage.setItem('selectedLanguage', 'en');
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π/–¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —è–∑—ã–∫
        document.documentElement.lang = savedLanguage;
        window.currentLanguage = savedLanguage;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞
        this.updateLanguageSelector(savedLanguage);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —è–∑—ã–∫ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        if (typeof window.switchLanguage === 'function') {
            window.switchLanguage(savedLanguage);
        } else if (typeof window.switchSiteLanguage === 'function') {
            window.switchSiteLanguage(savedLanguage);
        }
        if (typeof window.initializeI18n === 'function') {
            window.initializeI18n(savedLanguage);
        }
        
        console.info(`üåç Language set to: ${savedLanguage}`);
    }

    initializeMapIfPresent() {
        // Feature detection: Only initialize map if container exists
        const mapElement = document.getElementById('map');
        if (!mapElement) {
            console.log('üìç Map container not found, skipping map initialization');
            return;
        }

        // Check for Leaflet library
        if (typeof L === 'undefined') {
            console.warn('‚ö†Ô∏è Leaflet library not found, map initialization skipped');
            return;
        }

        setTimeout(() => {
            try {
                const map = L.map('map').setView([38.5598, 68.7870], 13);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '¬© OpenStreetMap contributors'
                }).addTo(map);
                
                L.marker([38.5598, 68.7870])
                    .addTo(map)
                    .bindPopup('Bunyod-Tour Office')
                    .openPopup();
                    
                console.log('üó∫Ô∏è Map initialized successfully');
            } catch (error) {
                console.warn('‚ö†Ô∏è Map initialization failed:', error);
            }
        }, 1000);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.layoutLoader = new LayoutLoader();
});

// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
if (typeof module !== 'undefined' && module.exports) {
    module.exports = LayoutLoader;
}