"Я готовлю этот проект к переносу на новый облачный сервер (VDS/VPS). Мне необходимо собрать максимально полную и детализированную информацию о проекте, чтобы обеспечить его стабильную работу после переноса.
Пожалуйста, предоставь следующую информацию:
I. Техническая архитектура и зависимости:
Язык программирования и фреймворки:
Основной язык программирования проекта (например, JavaScript, TypeScript, Python, PHP).
Используемые веб-фреймворки (например, Express.js, Next.js, React, Vue.js, Flask, Django, Laravel).
Какие другие ключевые библиотеки или модули используются (например, bcrypt, jsonwebtoken, axios).
Является ли это Fullstack-приложением (бэкенд + фронтенд в одном проекте)?
Управление зависимостями:
Содержимое файла package.json (если Node.js/JavaScript) или requirements.txt (если Python) или composer.json (если PHP). Укажи, какие команды используются для их установки (npm install, yarn install, pip install, composer install).
База данных и Prisma ORM:
Содержимое файла schema.prisma (полностью).
Тип используемой базы данных (например, PostgreSQL, MySQL, SQLite).
Как происходит подключение к базе данных (например, через переменные окружения DATABASE_URL). Укажи, какие переменные окружения нужны для подключения.
Используются ли миграции Prisma? Если да, то как их запускать (npx prisma migrate dev, npx prisma migrate deploy)?
Файлы проекта:
Полный список файлов и папок в проекте, с указанием их иерархии (можно в виде древовидной структуры или просто список).
Особое внимание удели конфигурационным файлам (например, .env.example, файлы с настройками сервера).
Запуск проекта:
Содержимое файла .replit.
Точная команда, которая используется для запуска проекта на Replit (например, npm start, node index.js, python app.py).
Какая команда или скрипт используется для сборки фронтенда, если он есть (например, npm run build)?
Специфика Replit:
Используются ли какие-либо специфические для Replit сервисы или функции (например, Replit DB, Replit Hosting, Secrets)? Если да, то как их заменить на обычном сервере?
II. Функционал и логика работы сайта:
Общее назначение сайта:
Какова основная цель этого сайта? (например, интернет-магазин, блог, социальная сеть, платформа для обучения, корпоративный портал).
Роли пользователей:
Какие существуют роли пользователей (например, гость, зарегистрированный пользователь, администратор, модератор, владелец бизнеса)?
Кратко опиши, какие основные действия разрешены каждой роли.
Ключевые страницы и их функционал:
Главная страница (Home Page): Что на ней отображается? Какие действия может выполнить пользователь?
Страницы аутентификации/авторизации: Как пользователи регистрируются, входят в систему, восстанавливают пароль?
Профиль пользователя: Что отображается в профиле? Что пользователь может редактировать?
Основные функции: Опиши пошагово, как работают ключевые функции сайта. Например, если это интернет-магазин:
Как пользователь просматривает товары?
Как добавляет их в корзину?
Как оформляет заказ?
Как администратор управляет товарами/заказами?
Другие важные страницы/разделы: Опиши их назначение и функционал.
Взаимодействие с пользователем:
Какие интерактивные элементы (кнопки, формы, поля ввода) есть на сайте?
Что происходит при их использовании (например, отправка формы, загрузка файла, переход на другую страницу, всплывающее окно)?
Бизнес-логика:
Есть ли какая-то сложная логика, например, расчеты, интеграции с внешними сервисами, обработка платежей, рассылки? Опиши ее.
Ожидаемое поведение:
Какие основные "сценарии успеха" должен пройти пользователь, чтобы выполнить свою задачу?
Какие "сценарии ошибки" могут возникнуть и как сайт должен на них реагировать (например, некорректный ввод данных, отсутствие товара)?