ВАЖНО:
- Если в моём описании есть неточности или чего-то не хватает, сделай так, как будет правильнее и логичнее для работы системы.
- Все данные каждого шага должны сохраняться в БД. Если пользователь не прошёл все шаги и не оплатил → бронь остаётся черновиком и считается неактивной.

---

⚡ ЭТАП 1 – ВЫБОР ОТЕЛЯ (/booking/step1)
1. Пользователь выбирает:
   - Отель (связанный с туром).
   - Категории номеров → для каждой можно указать количество через кнопки “+ / -”.
   - Тип питания (если не включено в категорию номера).
2. Справа отображается блок «Детали тура»:
   - Название, дата, длительность тура, количество туристов, тип тура.
   - Выбранный отель (название, адрес, рейтинг).
   - Список номеров (категория, цена × кол-во × дни).
   - Выбранный тип питания (если отдельный).
   - Итоговый расчёт:
     (Цена тура × туристы) + (Номера × количество × дни) + (Питание × туристы × дни).
   - Контакты службы поддержки (телефон, e-mail, часы работы).
3. При нажатии «Выбрать/Продолжить»:
   - Создаётся запись в таблице Booking.
   - Сохраняются: tourId, hotelId, roomSelection, mealSelection, duration, туристы (кол-во), totalPrice (черновик).
   - Переход на Step2.

---

⚡ ЭТАП 2 – ДАННЫЕ ТУРИСТА (/booking/step2)
1. Форма:
   - ФИО контактного лица
   - Телефон
   - Email
   - Список туристов (динамически добавляемые ФИО)
   - Поле «Особые пожелания»
   - Чекбоксы подтверждения:
     • Согласие с офертой/персональными данными
     • Согласие с правилами оплаты и возврата
2. При нажатии «Подтвердить и перейти к оплате»:
   - Обновляется запись Booking:
     contactName, contactPhone, contactEmail, tourists (JSON), wishes/notes.
   - Статус брони остаётся «draft».
   - Переход на Step3.

---

⚡ ЭТАП 3 – ОПЛАТА (/booking/step3)
1. Отображаются доступные методы оплаты (ТОЛЬКО иконки/названия, без реальной интеграции на этом этапе):
   - VISA / MasterCard — Payler
   - VISA / MasterCard — AlifPay
   - Binance (Криптовалюта)
   - Корти Милли
2. Пользователь выбирает метод → редирект на mock-страницу:
   - Оплата успешно → обновить Booking.status = "paid".
   - Ошибка оплаты → Booking.status = "error".
3. После успешной оплаты:
   - Отправить письмо пользователю и администратору (Nodemailer):
     «Бронирование подтверждено» с деталями тура и оплатой.

---

⚡ BACKEND (Prisma Booking модель)

  model Booking {
    id              Int      @id @default(autoincrement())
    tourId          Int
    hotelId         Int?
    tourists        Json     // список туристов
    contactName     String?
    contactPhone    String?
    contactEmail    String?
    roomSelection   Json
    mealSelection   Json
    totalPrice      Float
    status          String   @default("draft") // draft, paid, error, cancelled
    createdAt       DateTime @default(now())

    tour   Tour   @relation(fields: [tourId], references: [id])
    hotel  Hotel? @relation(fields: [hotelId], references: [id])
  }

---

⚡ BACKEND API
- POST /api/booking/start → создать черновик (Step1).
- PUT /api/booking/details → обновить контактные данные и туристов (Step2).
- PUT /api/booking/pay → обновить статус (Step3: success/error).
- GET /api/booking/:id → получить детали (для step2/step3).

---

⚡ FRONTEND
- Сделать прогресс‑бар (Step1 → Step2 → Step3).
- Каждый шаг сохраняется на сервере (Booking обновляется поэтапно).
- Если пользователь обновит страницу → должно тянуть данные из БД (GET /api/booking/:id).
- Пересчёт стоимости: и на клиенте (для UX), и на сервере (для точности).
- Адаптивная верстка (Tailwind CSS).