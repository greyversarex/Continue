Привет. Я переношу этот проект с Replit на хостинг Timeweb. После переноса файлов на новый сервер и попытки запуска, перестает работать авторизация в админ-панели (выдает ошибку неверных данных), и, возможно, другие функции тоже нарушены. Мой консультант-программист, взглянув на структуру файлов, предположил, что в проекте может быть избыточная или некорректная архитектура, описав ее как "два фронтенда и два бэкенда".
Задача: Мне нужна исчерпывающая техническая документация по этому проекту, чтобы я мог правильно его развернуть и настроить на стандартном Linux-сервере (хостинг Timeweb). Пожалуйста, предоставь максимально подробный и структурированный отчет, ответив на КАЖДЫЙ из следующих пунктов. Если какой-то пункт не применим, укажи это.
Раздел 1: Высокоуровневый обзор архитектуры
1.1. Полный технологический стек: Перечисли все языки программирования, фреймворки, библиотеки и ключевые технологии, используемые в проекте, отдельно для бэкенда и фронтенда.
1.2. Архитектура приложения: Опиши, как взаимодействуют между собой фронтенд и бэкенд. Это монолитное приложение (где фронтенд и бэкенд тесно связаны) или раздельное (например, Single Page Application + REST API)?
1.3. Комментарий по структуре: Проанализируй и прокомментируй предположение о "двух фронтендах и двух бэкендах". Есть ли в проекте дублирующийся, устаревший или неиспользуемый код? Если да, укажи, какие папки или файлы можно считать основным, а какие — лишними.
Раздел 2: Детализация Бэкенда
2.1. Основной фреймворк и версия: Укажи название и точную версию бэкенд-фреймворка (например, Django 4.2.1, Flask 2.3.0, Express.js 4.18.2).
2.2. Точка входа: Какой файл является главным и запускает весь бэкенд-сервер (например, app.py, main.py, server.js)?
2.3. Роутинг (Маршрутизация): В каких файлах определяются URL-адреса (эндпоинты) API и страницы сайта?
2.4. Зависимости: Предоставь полное содержимое файла зависимостей (requirements.txt для Python, package.json для Node.js).
2.5. Механизм аутентификации: Опиши детально, как работает система входа в админ-панель. Используются сессии, JWT-токены или что-то другое? Какие библиотеки за это отвечают (например, Flask-Login, Passport.js)? Как хешируются и проверяются пароли?
Раздел 3: Детализация Фронтенда
3.1. Тип фронтенда: Это статические HTML/CSS/JS файлы или используется какой-либо фреймворк (например, React, Vue, Angular)? Если да, укажи название и версию.
3.2. Процесс сборки: Требуется ли для фронтенда процесс "сборки" (компиляции)? Если да, то:
- Какая команда запускает сборку (например, npm run build)?
- В какую папку помещаются итоговые (статические) файлы после сборки (например, build, dist)?
3.3. Взаимодействие с бэкендом: Как фронтенд отправляет запросы на бэкенд? Есть ли в коде фронтенда жестко прописанные URL-адреса API? Если да, в каких файлах их искать, чтобы заменить на новый домен?
Раздел 4: База данных
4.1. Тип СУБД: Какая система управления базами данных используется (SQLite, PostgreSQL, MySQL, MongoDB)? Укажи версию.
4.2. Конфигурация подключения:
- Как и в каком файле настраивается подключение к базе данных?
- Какие переменные окружения (Secrets) для этого используются (например, DATABASE_URL, DB_USER, DB_PASSWORD)?
4.3. ORM/Библиотека: Используется ли ORM или библиотека для взаимодействия с БД (например, SQLAlchemy, Django ORM, Prisma, Mongoose)?
4.4. Миграции: Как управляется схема базы данных? Существуют ли файлы миграций и какая команда используется для их применения (например, flask db upgrade, python manage.py migrate)?
Раздел 5: Окружение и конфигурация
5.1. Переменные окружения (Secrets): Предоставь ПОЛНЫЙ список НАЗВАНИЙ всех переменных окружения, которые используются в проекте. Для каждой переменной кратко опиши ее назначение (например, SECRET_KEY - для подписи сессий, API_KEY_GOOGLE_MAPS - для карт Google). Не указывай сами значения секретов!
5.2. Конфигурационные файлы Replit: Предоставь полное содержимое файлов .replit и replit.nix. Объясни, что делает каждая команда в разделе [run].
5.3. Статические и медиафайлы: Как и где обрабатываются загружаемые пользователями файлы (картинки туров, отелей) и статические ассеты (CSS, JS, изображения)? Какие папки за это отвечают?
Раздел 6: Инструкции по развертыванию (Deployment)
Предоставь пошаговую инструкцию для развертывания проекта на чистом Linux-сервере:
6.1. Установка зависимостей: Какие команды нужно выполнить для установки всех зависимостей системы и проекта?
6.2. Сборка проекта: Какую команду нужно выполнить для сборки фронтенда (если это необходимо)?
6.3. Миграция БД: Какая команда запускает миграции базы данных?
6.4. Запуск сервера: Какая точная команда должна использоваться для запуска сервера в рабочем (production) режиме? (Важно: не в режиме разработки). Укажи, нужен ли для этого WSGI-сервер типа Gunicorn (для Python) или процесс-менеджер типа PM2 (для Node.js).
Раздел 7: Структура проекта
7.1. Дерево файлов: Предоставь полную древовидную структуру всех файлов и папок в проекте.
7.2. Описание ключевых файлов/папок: Для каждой основной папки и ключевого файла дай краткое описание их назначения.
Пожалуйста, собери всю эту информацию в единый, хорошо структурированный текстовый документ. Эта информация является критически важной для успешного переноса сайта.