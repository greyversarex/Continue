Нужно удалить только старую систему бронирования (страницы и обработчики брони), не трогая общий функционал туров, отелей и админ-панели. 
Создать новую систему бронирования из 3 последовательных шагов с сохранением состояния.

❗ Важно:
- Если в моём описании есть противоречия, неточности или чего-то не хватает — сделай так, как будет логичнее и правильнее для полноценной и удобной работы системы бронирования.
- Все данные (от выбора отеля до туристов и оплаты) должны сохраняться поэтапно в базе. 
- Если пользователь не завершил бронирование (не прошёл 3 этап и не оплатил), такая бронь остаётся черновиком и помечается как «неактивная» (никчёмная).
- В блоке «Детали тура» необходимо отображать телефон и e-mail службы поддержки.

⚡ Шаг 1. Выбор отеля
- Страница /booking/step1.
- Отображаются только отели, которые связаны с выбранным туром.
- Карточка отеля должна содержать:
  - Фотографии (галерея из базы).
  - Удобства (динамически из базы, никаких статичных примеров).
  - Категории номеров: название, цена за сутки, кнопки “+ / -” для выбора количества.
  - Типы питания: из базы, у каждого название и цена за сутки.
    ❗ Если категория номера имеет атрибут “питание включено”, отдельное питание не плюсуется.
- В правой части страницы — блок «Детали тура»:
  - Название тура, дата, длительность, тип тура, количество туристов.
  - Выбранный отель.
  - Выбранные категории номеров (с подсчётом: цена × количество × длительность тура).
  - Выбранный тип питания (если применяется).
  - Итоговая стоимость:
    цена тура + (номер × количество × дни) + (питание × кол-во туристов × дни).
  - Контакты службы поддержки (телефон, e-mail, режим работы).
- Пересчёт стоимости должен обновляться динамически при изменении выбора.
- Кнопка «Выбрать» → переход на шаг 2.

⚡ Шаг 2. Данные туриста
- Страница /booking/step2.
- Форма:
  - ФИО контактного лица
  - Телефон
  - Email
- Возможность добавлять туристов динамически (список ФИО).
- Поле «Особые пожелания».
- Чекбоксы:
  - «Принимаю условия оферты и даю согласие на использование данных»
  - «Ознакомлен с правилами оплаты и возврата средств»
- При сохранении все данные туристов и контактного лица должны записываться в базу (в уже созданную запись бронирования).
- Кнопка «Подтвердить и перейти к оплате» → шаг 3.

⚡ Шаг 3. Оплата
- Страница /booking/step3.
- Отображаются только названия и иконки способов оплаты (без интеграций):
  - VISA / MasterCard — Payler
  - VISA / MasterCard — AlifPay
  - Binance (Криптовалюта)
  - Корти Милли
- При выборе → редирект на mock-страницу «Оплата успешно» или «Ошибка оплаты».

⚡ Backend
- Добавить модель Prisma:

  model Booking {
    id              Int      @id @default(autoincrement())
    tourId          Int
    hotelId         Int?
    tourists        Json
    contactName     String
    contactPhone    String
    contactEmail    String
    roomSelection   Json
    mealSelection   Json
    totalPrice      Float
    status          String   @default("draft") // draft, pending, paid, cancelled
    createdAt       DateTime @default(now())

    tour   Tour   @relation(fields: [tourId], references: [id])
    hotel  Hotel? @relation(fields: [hotelId], references: [id])
  }

- API роуты:
  - POST /booking/start → создаёт черновик бронирования с туром/отелем.
  - PUT /booking/details → сохраняет данные туристов и контактное лицо.
  - PUT /booking/pay → меняет статус (mock: paid или error).
  - GET /booking/:id → получить детали брони.

⚡ Frontend
- Сделать три шага как отдельные страницы (/booking/step1, step2, step3) с progress-индикатором.
- Каждый шаг должен отправлять данные на сервер и обновлять запись бронирования в базе.
- Если вкладка перезагружена, пользователь должен иметь возможность продолжить бронирование с того места.
- Расчёт цены происходит и на клиенте (для отображения), и на сервере (для точности).
- Использовать Tailwind CSS и общую стилистику проекта.
- Сделать адаптивным для мобильных устройств.