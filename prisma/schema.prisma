generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  tours Tour[]

  @@map("categories")
}

model TourBlock {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  slug        String   @unique
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tours       Tour[]

  @@map("tour_blocks")
}

model Tour {
  id                 Int                    @id @default(autoincrement())
  title              String
  description        String
  shortDesc          String?
  duration           String
  price              String
  currency           String                 @default("TJS")
  priceType          String                 @default("за человека")
  originalPrice      String?
  country            String?
  city               String?
  format             String?
  tourType           String?
  durationDays       Int?
  theme              String?
  startDate          String?
  endDate            String?
  startTime          String?
  startTimeOptions   String?
  pickupInfo         String?
  languages          String?
  availableMonths    String?
  availableDays      String?
  images             String?
  mainImage          String?
  services           String?
  highlights         String?
  itinerary          String?
  included           String?
  includes           String?
  excluded           String?
  requirements       String?
  difficulty         String?
  rating             Float?
  reviewsCount       Int?
  maxPeople          Int?
  minPeople          Int?
  location           String?
  tags               String?
  isActive           Boolean                @default(true)
  isFeatured         Boolean                @default(false)
  categoryId         Int
  tourBlockId        Int?                   @map("tour_block_id")
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  pricingData        String?
  assignedGuideId    Int?                   @map("assigned_guide_id")
  scheduledEndDate   DateTime?
  scheduledStartDate DateTime?
  status             String                 @default("pending")
  uniqueCode         String?                @unique
  bookingRequests    BookingRequest[]
  bookings           Booking[]
  guideReviews       GuideReview[]
  orders             Order[]
  reviews            Review[]
  tourGuides         TourGuide[]
  tourHotels         TourHotel[]
  pricingComponents  TourPricingComponent[]
  assignedGuide      Guide?                 @relation("AssignedGuide", fields: [assignedGuideId], references: [id])
  category           Category               @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tourBlock          TourBlock?             @relation(fields: [tourBlockId], references: [id])

  @@map("tours")
}

model Hotel {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  images      String?
  address     String?
  rating      Float?
  stars       Int?
  amenities   String?
  brand       String?
  category    String?
  country     String?
  city        String?
  pension     String?     @default("none")
  roomTypes   String?
  mealTypes   String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  bookings    Booking[]
  orders      Order[]
  tourHotels  TourHotel[]

  @@map("hotels")
}

model TourHotel {
  id            Int     @id @default(autoincrement())
  tourId        Int     @map("tour_id")
  hotelId       Int     @map("hotel_id")
  pricePerNight Float?  @map("price_per_night")
  isDefault     Boolean @default(false) @map("is_default")
  hotel         Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  tour          Tour    @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([tourId, hotelId])
  @@map("tour_hotels")
}

model Guide {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  photo       String?
  languages   String
  contact     String?
  experience  Int?
  rating      Float?
  login       String?
  password    String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orders       Order[]
  tourGuides   TourGuide[]
  assignedTours Tour[] @relation("AssignedGuide")

  @@map("guides")
}

model TourGuide {
  id        Int     @id @default(autoincrement())
  tourId    Int     @map("tour_id")
  guideId   Int     @map("guide_id")
  isDefault Boolean @default(false) @map("is_default")
  guide     Guide   @relation(fields: [guideId], references: [id], onDelete: Cascade)
  tour      Tour    @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([tourId, guideId])
  @@map("tour_guides")
}

model Customer {
  id        Int      @id @default(autoincrement())
  fullName  String   @map("full_name")
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  reviews   Review[]

  @@map("customers")
}

model Order {
  id              Int      @id @default(autoincrement())
  orderNumber     String   @unique @map("order_number")
  customerId      Int      @map("customer_id")
  tourId          Int      @map("tour_id")
  hotelId         Int?     @map("hotel_id")
  guideId         Int?     @map("guide_id")
  tourDate        String   @map("tour_date")
  tourists        String
  wishes          String?
  totalAmount     Float    @map("total_amount")
  status          String   @default("pending")
  paymentStatus   String   @default("unpaid") @map("payment_status")
  paymentMethod   String?  @map("payment_method")
  paymentIntentId String?  @map("payment_intent_id")
  receiptData     String?  @map("receipt_data")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  guide           Guide?   @relation(fields: [guideId], references: [id])
  hotel           Hotel?   @relation(fields: [hotelId], references: [id])
  tour            Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model BookingRequest {
  id             Int      @id @default(autoincrement())
  customerName   String   @map("customer_name")
  customerEmail  String   @map("customer_email")
  preferredDate  String   @map("preferred_date")
  numberOfPeople Int      @map("number_of_people")
  tourId         Int      @map("tour_id")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tour           Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@map("booking_requests")
}

model Review {
  id           Int       @id @default(autoincrement())
  customerId   Int?      @map("customer_id")
  tourId       Int       @map("tour_id")
  reviewerName String    @map("reviewer_name")
  rating       Int
  text         String
  photos       String?
  isModerated  Boolean   @default(false) @map("is_moderated")
  isApproved   Boolean   @default(false) @map("is_approved")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  customer     Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tour         Tour      @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  fullName  String   @map("full_name")
  role      String   @default("admin")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model News {
  id              Int      @id @default(autoincrement())
  title           String
  content         String
  excerpt         String?
  category        String
  image           String?
  images          String?
  tags            String?
  author          String   @default("Bunyod-Tour")
  isPublished     Boolean  @default(true) @map("is_published")
  isFeatured      Boolean  @default(false) @map("is_featured")
  publishedAt     DateTime @default(now()) @map("published_at")
  slug            String   @unique
  metaTitle       String?  @map("meta_title")
  metaDescription String?  @map("meta_description")
  views           Int      @default(0)
  readTime        Int?     @map("read_time")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("news")
}

model ContentBlock {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  title     String
  content   String
  type      String
  section   String
  isActive  Boolean  @default(true)
  sortOrder Int      @default(0)
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("content_blocks")
}

model SiteSetting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  type      String
  group     String
  label     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("site_settings")
}

model Page {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  content     String
  metaTitle   String?
  metaDesc    String?
  isPublished Boolean  @default(true)
  template    String   @default("default")
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("pages")
}

model MenuItem {
  id        Int        @id @default(autoincrement())
  parentId  Int?       @map("parent_id")
  title     String
  url       String
  type      String
  isActive  Boolean    @default(true)
  sortOrder Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  parent    MenuItem?  @relation("MenuItemParent", fields: [parentId], references: [id])
  children  MenuItem[] @relation("MenuItemParent")

  @@map("menu_items")
}

model NewsPost {
  id          Int          @id @default(autoincrement())
  title       String
  slug        String       @unique
  excerpt     String?
  content     String
  imageUrl    String?
  category    NewsCategory
  author      String?
  publishDate DateTime     @default(now())
  isFeatured  Boolean      @default(false)
  isPublished Boolean      @default(true)
  views       Int          @default(0)
  metaTitle   String?
  metaDesc    String?
  tags        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("news_posts")
}

model NewsletterSubscriber {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  isActive       Boolean   @default(true)
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?

  @@map("newsletter_subscribers")
}

model Slide {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String?
  link        String?
  buttonText  String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("slides")
}

model Booking {
  id                  Int      @id @default(autoincrement())
  tourId              Int      @map("tour_id")
  hotelId             Int?     @map("hotel_id")
  tourists            String
  contactName         String?  @map("contact_name")
  contactPhone        String?  @map("contact_phone")
  contactEmail        String?  @map("contact_email")
  roomSelection       String?  @map("room_selection")
  mealSelection       String?  @map("meal_selection")
  totalPrice          Float    @map("total_price")
  tourDate            String   @map("tour_date")
  numberOfTourists    Int      @map("number_of_tourists")
  specialRequests     String?  @map("special_requests")
  status              String   @default("draft")
  paymentMethod       String?  @map("payment_method")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  selectedCurrency    String   @default("TJS") @map("selected_currency")
  totalPriceConverted Float?   @map("total_price_converted")
  hotel               Hotel?   @relation(fields: [hotelId], references: [id])
  tour                Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model ExchangeRate {
  id        Int      @id @default(autoincrement())
  currency  String   @unique
  rate      Float
  symbol    String
  name      String
  isActive  Boolean  @default(true)
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())

  @@map("exchange_rates")
}

model PriceCalculatorComponent {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  category    String
  name        String
  price       Float
  unit        String
  description String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("price_calculator_components")
}

model TourPricingComponent {
  id           Int      @id @default(autoincrement())
  tourId       Int      @map("tour_id")
  componentKey String   @map("component_key")
  quantity     Float    @default(1)
  customPrice  Float?   @map("custom_price")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tour         Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([tourId, componentKey])
  @@map("tour_pricing_components")
}

model TourGuideProfile {
  id            Int           @id @default(autoincrement())
  name          String
  login         String        @unique
  password      String
  email         String?
  phone         String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  guideReviews  GuideReview[]

  @@map("tour_guide_profiles")
}

model GuideReview {
  id        Int              @id @default(autoincrement())
  tourId    Int              @map("tour_id")
  guideId   Int              @map("guide_id")
  content   String
  createdAt DateTime         @default(now())
  guide     TourGuideProfile @relation(fields: [guideId], references: [id], onDelete: Cascade)
  tour      Tour             @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([tourId, guideId])
  @@map("guide_reviews")
}

enum NewsCategory {
  tours
  events
  announcements
  tips
  general
}
